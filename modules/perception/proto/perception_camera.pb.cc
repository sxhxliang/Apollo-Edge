// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_camera.proto

#include "modules/perception/proto/perception_camera.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_modules_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fcommon_2fproto_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_modules_2fcommon_2fproto_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PerceptionObstacle_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraCalibrator_modules_2fperception_2fproto_2fperception_5fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CameraLaneLine_modules_2fperception_2fproto_2fperception_5fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraObstacle_modules_2fperception_2fproto_2fperception_5fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndPoints_modules_2fperception_2fproto_2fperception_5fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneLineCubicCurve_modules_2fperception_2fproto_2fperception_5fcamera_2eproto;
namespace apollo {
namespace perception {
namespace camera {
class LaneLineCubicCurveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneLineCubicCurve> _instance;
} _LaneLineCubicCurve_default_instance_;
class EndPointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndPoints> _instance;
} _EndPoints_default_instance_;
class CameraLaneLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraLaneLine> _instance;
} _CameraLaneLine_default_instance_;
class CameraCalibratorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraCalibrator> _instance;
} _CameraCalibrator_default_instance_;
class CameraObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraObstacle> _instance;
} _CameraObstacle_default_instance_;
class CameraDebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraDebug> _instance;
} _CameraDebug_default_instance_;
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static void InitDefaultsscc_info_CameraCalibrator_modules_2fperception_2fproto_2fperception_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::_CameraCalibrator_default_instance_;
    new (ptr) ::apollo::perception::camera::CameraCalibrator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::CameraCalibrator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraCalibrator_modules_2fperception_2fproto_2fperception_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CameraCalibrator_modules_2fperception_2fproto_2fperception_5fcamera_2eproto}, {}};

static void InitDefaultsscc_info_CameraDebug_modules_2fperception_2fproto_2fperception_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::_CameraDebug_default_instance_;
    new (ptr) ::apollo::perception::camera::CameraDebug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::CameraDebug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CameraDebug_modules_2fperception_2fproto_2fperception_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CameraDebug_modules_2fperception_2fproto_2fperception_5fcamera_2eproto}, {
      &scc_info_Header_modules_2fcommon_2fproto_2fheader_2eproto.base,
      &scc_info_CameraCalibrator_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,
      &scc_info_CameraLaneLine_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,
      &scc_info_CameraObstacle_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,}};

static void InitDefaultsscc_info_CameraLaneLine_modules_2fperception_2fproto_2fperception_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::_CameraLaneLine_default_instance_;
    new (ptr) ::apollo::perception::camera::CameraLaneLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::CameraLaneLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CameraLaneLine_modules_2fperception_2fproto_2fperception_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CameraLaneLine_modules_2fperception_2fproto_2fperception_5fcamera_2eproto}, {
      &scc_info_LaneLineCubicCurve_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,
      &scc_info_Point3D_modules_2fcommon_2fproto_2fgeometry_2eproto.base,
      &scc_info_Point2D_modules_2fcommon_2fproto_2fgeometry_2eproto.base,
      &scc_info_EndPoints_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,}};

static void InitDefaultsscc_info_CameraObstacle_modules_2fperception_2fproto_2fperception_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::_CameraObstacle_default_instance_;
    new (ptr) ::apollo::perception::camera::CameraObstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::CameraObstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraObstacle_modules_2fperception_2fproto_2fperception_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_CameraObstacle_modules_2fperception_2fproto_2fperception_5fcamera_2eproto}, {
      &scc_info_PerceptionObstacle_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto.base,
      &scc_info_Point2D_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_EndPoints_modules_2fperception_2fproto_2fperception_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::_EndPoints_default_instance_;
    new (ptr) ::apollo::perception::camera::EndPoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::EndPoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EndPoints_modules_2fperception_2fproto_2fperception_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EndPoints_modules_2fperception_2fproto_2fperception_5fcamera_2eproto}, {
      &scc_info_Point2D_modules_2fcommon_2fproto_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_LaneLineCubicCurve_modules_2fperception_2fproto_2fperception_5fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::camera::_LaneLineCubicCurve_default_instance_;
    new (ptr) ::apollo::perception::camera::LaneLineCubicCurve();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::camera::LaneLineCubicCurve::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneLineCubicCurve_modules_2fperception_2fproto_2fperception_5fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LaneLineCubicCurve_modules_2fperception_2fproto_2fperception_5fcamera_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, longitude_min_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, longitude_max_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, a_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, b_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, c_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, d_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, start_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, pos_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, curve_camera_coord_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, curve_image_coord_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, curve_camera_point_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, curve_image_point_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, image_end_point_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, track_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, use_type_),
  2,
  6,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, pitch_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, camera_height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, type_probs_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, upper_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, lower_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, key_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, debug_message_),
  0,
  3,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, source_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, camera_calibrator_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, camera_laneline_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, camera_obstacle_),
  1,
  0,
  3,
  2,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::apollo::perception::camera::LaneLineCubicCurve)},
  { 17, 24, sizeof(::apollo::perception::camera::EndPoints)},
  { 26, 41, sizeof(::apollo::perception::camera::CameraLaneLine)},
  { 51, 58, sizeof(::apollo::perception::camera::CameraCalibrator)},
  { 60, 72, sizeof(::apollo::perception::camera::CameraObstacle)},
  { 79, 90, sizeof(::apollo::perception::camera::CameraDebug)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_LaneLineCubicCurve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_EndPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_CameraLaneLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_CameraCalibrator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_CameraObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_CameraDebug_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[] =
  "\n0modules/perception/proto/perception_ca"
  "mera.proto\022\030apollo.perception.camera\032#mo"
  "dules/common/proto/geometry.proto\032!modul"
  "es/common/proto/header.proto\0322modules/pe"
  "rception/proto/perception_obstacle.proto"
  "\"n\n\022LaneLineCubicCurve\022\025\n\rlongitude_min\030"
  "\001 \001(\002\022\025\n\rlongitude_max\030\002 \001(\002\022\t\n\001a\030\003 \001(\002\022"
  "\t\n\001b\030\004 \001(\002\022\t\n\001c\030\005 \001(\002\022\t\n\001d\030\006 \001(\002\"W\n\tEndP"
  "oints\022%\n\005start\030\001 \001(\0132\026.apollo.common.Poi"
  "nt2D\022#\n\003end\030\002 \001(\0132\026.apollo.common.Point2"
  "D\"\257\004\n\016CameraLaneLine\0224\n\004type\030\001 \001(\0162&.apo"
  "llo.perception.camera.LaneLineType\022@\n\010po"
  "s_type\030\002 \001(\0162..apollo.perception.camera."
  "LaneLinePositionType\022H\n\022curve_camera_coo"
  "rd\030\003 \001(\0132,.apollo.perception.camera.Lane"
  "LineCubicCurve\022G\n\021curve_image_coord\030\004 \001("
  "\0132,.apollo.perception.camera.LaneLineCub"
  "icCurve\0226\n\026curve_camera_point_set\030\005 \003(\0132"
  "\026.apollo.common.Point3D\0225\n\025curve_image_p"
  "oint_set\030\006 \003(\0132\026.apollo.common.Point2D\022@"
  "\n\023image_end_point_set\030\007 \003(\0132#.apollo.per"
  "ception.camera.EndPoints\022\020\n\010track_id\030\010 \001"
  "(\005\022\022\n\nconfidence\030\t \001(\002\022;\n\010use_type\030\n \001(\016"
  "2).apollo.perception.camera.LaneLineUseT"
  "ype\">\n\020CameraCalibrator\022\023\n\013pitch_angle\030\001"
  " \001(\002\022\025\n\rcamera_height\030\002 \001(\002\"\255\003\n\016CameraOb"
  "stacle\0227\n\010obstacle\030\001 \001(\0132%.apollo.percep"
  "tion.PerceptionObstacle\022A\n\004type\030\025 \001(\01623."
  "apollo.perception.camera.CameraObstacle."
  "CameraType\022\022\n\ntype_probs\030\026 \003(\002\022*\n\nupper_"
  "left\030\027 \001(\0132\026.apollo.common.Point2D\022+\n\013lo"
  "wer_right\030\030 \001(\0132\026.apollo.common.Point2D\022"
  "*\n\nkey_points\030\031 \003(\0132\026.apollo.common.Poin"
  "t2D\022\025\n\rdebug_message\030\032 \003(\t\"o\n\nCameraType"
  "\022\013\n\007UNKNOWN\020\000\022\023\n\017UNKNOWN_MOVABLE\020\001\022\025\n\021UN"
  "KNOWN_UNMOVABLE\020\002\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BIC"
  "YCLE\020\004\022\013\n\007VEHICLE\020\005\"\342\002\n\013CameraDebug\022%\n\006h"
  "eader\030\001 \001(\0132\025.apollo.common.Header\022\024\n\014so"
  "urce_topic\030\002 \001(\t\022I\n\nerror_code\030\003 \001(\0162).a"
  "pollo.perception.camera.CameraErrorCode:"
  "\nERROR_NONE\022E\n\021camera_calibrator\030\004 \001(\0132*"
  ".apollo.perception.camera.CameraCalibrat"
  "or\022A\n\017camera_laneline\030\005 \003(\0132(.apollo.per"
  "ception.camera.CameraLaneLine\022A\n\017camera_"
  "obstacle\030\006 \003(\0132(.apollo.perception.camer"
  "a.CameraObstacle*4\n\017CameraErrorCode\022\016\n\nE"
  "RROR_NONE\020\000\022\021\n\rERROR_UNKNOWN\020\001*V\n\014LaneLi"
  "neType\022\020\n\014WHITE_DASHED\020\000\022\017\n\013WHITE_SOLID\020"
  "\001\022\021\n\rYELLOW_DASHED\020\002\022\020\n\014YELLOW_SOLID\020\003*\210"
  "\002\n\024LaneLinePositionType\022\031\n\014BOLLARD_LEFT\020"
  "\373\377\377\377\377\377\377\377\377\001\022\030\n\013FOURTH_LEFT\020\374\377\377\377\377\377\377\377\377\001\022\027\n\n"
  "THIRD_LEFT\020\375\377\377\377\377\377\377\377\377\001\022\032\n\rADJACENT_LEFT\020\376"
  "\377\377\377\377\377\377\377\377\001\022\025\n\010EGO_LEFT\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tEGO_"
  "RIGHT\020\001\022\022\n\016ADJACENT_RIGHT\020\002\022\017\n\013THIRD_RIG"
  "HT\020\003\022\020\n\014FOURTH_RIGHT\020\004\022\021\n\rBOLLARD_RIGHT\020"
  "\005\022\t\n\005OTHER\020\006\022\013\n\007UNKNOWN\020\007*(\n\017LaneLineUse"
  "Type\022\010\n\004REAL\020\000\022\013\n\007VIRTUAL\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_sccs[6] = {
  &scc_info_CameraCalibrator_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,
  &scc_info_CameraDebug_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,
  &scc_info_CameraLaneLine_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,
  &scc_info_CameraObstacle_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,
  &scc_info_EndPoints_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,
  &scc_info_LaneLineCubicCurve_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once;
static bool descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto = {
  &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_initialized, descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fcamera_2eproto, "modules/perception/proto/perception_camera.proto", 2267,
  &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once, descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_sccs, descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto, 6, file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fperception_2fproto_2fperception_5fcamera_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto), true);
namespace apollo {
namespace perception {
namespace camera {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraObstacle_CameraType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[0];
}
bool CameraObstacle_CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraObstacle_CameraType CameraObstacle::UNKNOWN;
constexpr CameraObstacle_CameraType CameraObstacle::UNKNOWN_MOVABLE;
constexpr CameraObstacle_CameraType CameraObstacle::UNKNOWN_UNMOVABLE;
constexpr CameraObstacle_CameraType CameraObstacle::PEDESTRIAN;
constexpr CameraObstacle_CameraType CameraObstacle::BICYCLE;
constexpr CameraObstacle_CameraType CameraObstacle::VEHICLE;
constexpr CameraObstacle_CameraType CameraObstacle::CameraType_MIN;
constexpr CameraObstacle_CameraType CameraObstacle::CameraType_MAX;
constexpr int CameraObstacle::CameraType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[1];
}
bool CameraErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[2];
}
bool LaneLineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLinePositionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[3];
}
bool LaneLinePositionType_IsValid(int value) {
  switch (value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineUseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[4];
}
bool LaneLineUseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LaneLineCubicCurve::InitAsDefaultInstance() {
}
class LaneLineCubicCurve::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<LaneLineCubicCurve>()._has_bits_);
  static void set_has_longitude_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneLineCubicCurve::kLongitudeMinFieldNumber;
const int LaneLineCubicCurve::kLongitudeMaxFieldNumber;
const int LaneLineCubicCurve::kAFieldNumber;
const int LaneLineCubicCurve::kBFieldNumber;
const int LaneLineCubicCurve::kCFieldNumber;
const int LaneLineCubicCurve::kDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneLineCubicCurve::LaneLineCubicCurve()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.LaneLineCubicCurve)
}
LaneLineCubicCurve::LaneLineCubicCurve(const LaneLineCubicCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_min_, &from.longitude_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&longitude_min_)) + sizeof(d_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.LaneLineCubicCurve)
}

void LaneLineCubicCurve::SharedCtor() {
  ::memset(&longitude_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&longitude_min_)) + sizeof(d_));
}

LaneLineCubicCurve::~LaneLineCubicCurve() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.LaneLineCubicCurve)
  SharedDtor();
}

void LaneLineCubicCurve::SharedDtor() {
}

void LaneLineCubicCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneLineCubicCurve& LaneLineCubicCurve::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneLineCubicCurve_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void LaneLineCubicCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.LaneLineCubicCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&longitude_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&d_) -
        reinterpret_cast<char*>(&longitude_min_)) + sizeof(d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneLineCubicCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float longitude_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_longitude_min(&has_bits);
          longitude_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longitude_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_longitude_max(&has_bits);
          longitude_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          HasBitSetters::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          HasBitSetters::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          HasBitSetters::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          HasBitSetters::set_has_d(&has_bits);
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneLineCubicCurve::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.LaneLineCubicCurve)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float longitude_min = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_longitude_min(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float longitude_max = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_longitude_max(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float a = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_a(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float b = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_b(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_c(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float d = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_d(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.LaneLineCubicCurve)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.LaneLineCubicCurve)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneLineCubicCurve::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.LaneLineCubicCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float longitude_min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->longitude_min(), output);
  }

  // optional float longitude_max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->longitude_max(), output);
  }

  // optional float a = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->a(), output);
  }

  // optional float b = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->b(), output);
  }

  // optional float c = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->c(), output);
  }

  // optional float d = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->d(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.LaneLineCubicCurve)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneLineCubicCurve::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.LaneLineCubicCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float longitude_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->longitude_min(), target);
  }

  // optional float longitude_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->longitude_max(), target);
  }

  // optional float a = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->a(), target);
  }

  // optional float b = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->b(), target);
  }

  // optional float c = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->c(), target);
  }

  // optional float d = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->d(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.LaneLineCubicCurve)
  return target;
}

size_t LaneLineCubicCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.LaneLineCubicCurve)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float longitude_min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float longitude_max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float a = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float b = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float c = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float d = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneLineCubicCurve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.LaneLineCubicCurve)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneLineCubicCurve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneLineCubicCurve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.LaneLineCubicCurve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.LaneLineCubicCurve)
    MergeFrom(*source);
  }
}

void LaneLineCubicCurve::MergeFrom(const LaneLineCubicCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.LaneLineCubicCurve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      longitude_min_ = from.longitude_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_max_ = from.longitude_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000008u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000010u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000020u) {
      d_ = from.d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneLineCubicCurve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.LaneLineCubicCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneLineCubicCurve::CopyFrom(const LaneLineCubicCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.LaneLineCubicCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLineCubicCurve::IsInitialized() const {
  return true;
}

void LaneLineCubicCurve::Swap(LaneLineCubicCurve* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneLineCubicCurve::InternalSwap(LaneLineCubicCurve* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(longitude_min_, other->longitude_min_);
  swap(longitude_max_, other->longitude_max_);
  swap(a_, other->a_);
  swap(b_, other->b_);
  swap(c_, other->c_);
  swap(d_, other->d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneLineCubicCurve::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndPoints::InitAsDefaultInstance() {
  ::apollo::perception::camera::_EndPoints_default_instance_._instance.get_mutable()->start_ = const_cast< ::apollo::common::Point2D*>(
      ::apollo::common::Point2D::internal_default_instance());
  ::apollo::perception::camera::_EndPoints_default_instance_._instance.get_mutable()->end_ = const_cast< ::apollo::common::Point2D*>(
      ::apollo::common::Point2D::internal_default_instance());
}
class EndPoints::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<EndPoints>()._has_bits_);
  static const ::apollo::common::Point2D& start(const EndPoints* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point2D& end(const EndPoints* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Point2D&
EndPoints::HasBitSetters::start(const EndPoints* msg) {
  return *msg->start_;
}
const ::apollo::common::Point2D&
EndPoints::HasBitSetters::end(const EndPoints* msg) {
  return *msg->end_;
}
void EndPoints::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void EndPoints::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndPoints::kStartFieldNumber;
const int EndPoints::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndPoints::EndPoints()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.EndPoints)
}
EndPoints::EndPoints(const EndPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::apollo::common::Point2D(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from.has_end()) {
    end_ = new ::apollo::common::Point2D(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.EndPoints)
}

void EndPoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndPoints_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

EndPoints::~EndPoints() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.EndPoints)
  SharedDtor();
}

void EndPoints::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void EndPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndPoints& EndPoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndPoints_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void EndPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.EndPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EndPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Point2D start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EndPoints::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.EndPoints)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Point2D start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point2D end = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.EndPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.EndPoints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EndPoints::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.EndPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point2D start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::start(this), output);
  }

  // optional .apollo.common.Point2D end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::end(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.EndPoints)
}

::PROTOBUF_NAMESPACE_ID::uint8* EndPoints::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.EndPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point2D start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::start(this), target);
  }

  // optional .apollo.common.Point2D end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::end(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.EndPoints)
  return target;
}

size_t EndPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.EndPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Point2D start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .apollo.common.Point2D end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.EndPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const EndPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.EndPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.EndPoints)
    MergeFrom(*source);
  }
}

void EndPoints::MergeFrom(const EndPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.EndPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start()->::apollo::common::Point2D::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_end()->::apollo::common::Point2D::MergeFrom(from.end());
    }
  }
}

void EndPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.EndPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPoints::CopyFrom(const EndPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.EndPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPoints::IsInitialized() const {
  return true;
}

void EndPoints::Swap(EndPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndPoints::InternalSwap(EndPoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_, other->start_);
  swap(end_, other->end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraLaneLine::InitAsDefaultInstance() {
  ::apollo::perception::camera::_CameraLaneLine_default_instance_._instance.get_mutable()->curve_camera_coord_ = const_cast< ::apollo::perception::camera::LaneLineCubicCurve*>(
      ::apollo::perception::camera::LaneLineCubicCurve::internal_default_instance());
  ::apollo::perception::camera::_CameraLaneLine_default_instance_._instance.get_mutable()->curve_image_coord_ = const_cast< ::apollo::perception::camera::LaneLineCubicCurve*>(
      ::apollo::perception::camera::LaneLineCubicCurve::internal_default_instance());
}
class CameraLaneLine::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CameraLaneLine>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pos_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::camera::LaneLineCubicCurve& curve_camera_coord(const CameraLaneLine* msg);
  static void set_has_curve_camera_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::LaneLineCubicCurve& curve_image_coord(const CameraLaneLine* msg);
  static void set_has_curve_image_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::perception::camera::LaneLineCubicCurve&
CameraLaneLine::HasBitSetters::curve_camera_coord(const CameraLaneLine* msg) {
  return *msg->curve_camera_coord_;
}
const ::apollo::perception::camera::LaneLineCubicCurve&
CameraLaneLine::HasBitSetters::curve_image_coord(const CameraLaneLine* msg) {
  return *msg->curve_image_coord_;
}
void CameraLaneLine::clear_curve_camera_point_set() {
  curve_camera_point_set_.Clear();
}
void CameraLaneLine::clear_curve_image_point_set() {
  curve_image_point_set_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraLaneLine::kTypeFieldNumber;
const int CameraLaneLine::kPosTypeFieldNumber;
const int CameraLaneLine::kCurveCameraCoordFieldNumber;
const int CameraLaneLine::kCurveImageCoordFieldNumber;
const int CameraLaneLine::kCurveCameraPointSetFieldNumber;
const int CameraLaneLine::kCurveImagePointSetFieldNumber;
const int CameraLaneLine::kImageEndPointSetFieldNumber;
const int CameraLaneLine::kTrackIdFieldNumber;
const int CameraLaneLine::kConfidenceFieldNumber;
const int CameraLaneLine::kUseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraLaneLine::CameraLaneLine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.CameraLaneLine)
}
CameraLaneLine::CameraLaneLine(const CameraLaneLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      curve_camera_point_set_(from.curve_camera_point_set_),
      curve_image_point_set_(from.curve_image_point_set_),
      image_end_point_set_(from.image_end_point_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curve_camera_coord()) {
    curve_camera_coord_ = new ::apollo::perception::camera::LaneLineCubicCurve(*from.curve_camera_coord_);
  } else {
    curve_camera_coord_ = nullptr;
  }
  if (from.has_curve_image_coord()) {
    curve_image_coord_ = new ::apollo::perception::camera::LaneLineCubicCurve(*from.curve_image_coord_);
  } else {
    curve_image_coord_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(pos_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraLaneLine)
}

void CameraLaneLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraLaneLine_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  ::memset(&curve_camera_coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_type_) -
      reinterpret_cast<char*>(&curve_camera_coord_)) + sizeof(use_type_));
  pos_type_ = -5;
}

CameraLaneLine::~CameraLaneLine() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraLaneLine)
  SharedDtor();
}

void CameraLaneLine::SharedDtor() {
  if (this != internal_default_instance()) delete curve_camera_coord_;
  if (this != internal_default_instance()) delete curve_image_coord_;
}

void CameraLaneLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraLaneLine& CameraLaneLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraLaneLine_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void CameraLaneLine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraLaneLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curve_camera_point_set_.Clear();
  curve_image_point_set_.Clear();
  image_end_point_set_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(curve_camera_coord_ != nullptr);
      curve_camera_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(curve_image_coord_ != nullptr);
      curve_image_coord_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_type_) -
        reinterpret_cast<char*>(&type_)) + sizeof(use_type_));
    pos_type_ = -5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraLaneLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.LaneLineType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::LaneLineType_IsValid(val))) {
            set_type(static_cast<::apollo::perception::camera::LaneLineType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::LaneLinePositionType_IsValid(val))) {
            set_pos_type(static_cast<::apollo::perception::camera::LaneLinePositionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_curve_camera_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_curve_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D curve_camera_point_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_curve_camera_point_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point2D curve_image_point_set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_curve_image_point_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_image_end_point_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional int32 track_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          HasBitSetters::set_has_track_id(&has_bits);
          track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          HasBitSetters::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::LaneLineUseType_IsValid(val))) {
            set_use_type(static_cast<::apollo::perception::camera::LaneLineUseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraLaneLine::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.CameraLaneLine)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.camera.LaneLineType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::camera::LaneLineType_IsValid(value)) {
            set_type(static_cast< ::apollo::perception::camera::LaneLineType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::camera::LaneLinePositionType_IsValid(value)) {
            set_pos_type(static_cast< ::apollo::perception::camera::LaneLinePositionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_curve_camera_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_curve_image_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Point3D curve_camera_point_set = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_curve_camera_point_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Point2D curve_image_point_set = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_curve_image_point_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_image_end_point_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 track_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_track_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_confidence(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::camera::LaneLineUseType_IsValid(value)) {
            set_use_type(static_cast< ::apollo::perception::camera::LaneLineUseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.CameraLaneLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.CameraLaneLine)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraLaneLine::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.CameraLaneLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.LaneLineType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->pos_type(), output);
  }

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::curve_camera_coord(this), output);
  }

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::curve_image_coord(this), output);
  }

  // repeated .apollo.common.Point3D curve_camera_point_set = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->curve_camera_point_set_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->curve_camera_point_set(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.common.Point2D curve_image_point_set = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->curve_image_point_set_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->curve_image_point_set(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_end_point_set_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->image_end_point_set(static_cast<int>(i)),
      output);
  }

  // optional int32 track_id = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->track_id(), output);
  }

  // optional float confidence = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->confidence(), output);
  }

  // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->use_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.CameraLaneLine)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraLaneLine::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraLaneLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.LaneLineType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->pos_type(), target);
  }

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::curve_camera_coord(this), target);
  }

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::curve_image_coord(this), target);
  }

  // repeated .apollo.common.Point3D curve_camera_point_set = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->curve_camera_point_set_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->curve_camera_point_set(static_cast<int>(i)), target);
  }

  // repeated .apollo.common.Point2D curve_image_point_set = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->curve_image_point_set_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->curve_image_point_set(static_cast<int>(i)), target);
  }

  // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_end_point_set_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->image_end_point_set(static_cast<int>(i)), target);
  }

  // optional int32 track_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->track_id(), target);
  }

  // optional float confidence = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->confidence(), target);
  }

  // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->use_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraLaneLine)
  return target;
}

size_t CameraLaneLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraLaneLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Point3D curve_camera_point_set = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->curve_camera_point_set_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->curve_camera_point_set(static_cast<int>(i)));
    }
  }

  // repeated .apollo.common.Point2D curve_image_point_set = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->curve_image_point_set_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->curve_image_point_set(static_cast<int>(i)));
    }
  }

  // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->image_end_point_set_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->image_end_point_set(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curve_camera_coord_);
    }

    // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curve_image_coord_);
    }

    // optional .apollo.perception.camera.LaneLineType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 track_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->track_id());
    }

    // optional float confidence = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->use_type());
    }

    // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->pos_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraLaneLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.CameraLaneLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraLaneLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraLaneLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.CameraLaneLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.CameraLaneLine)
    MergeFrom(*source);
  }
}

void CameraLaneLine::MergeFrom(const CameraLaneLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraLaneLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  curve_camera_point_set_.MergeFrom(from.curve_camera_point_set_);
  curve_image_point_set_.MergeFrom(from.curve_image_point_set_);
  image_end_point_set_.MergeFrom(from.image_end_point_set_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_curve_camera_coord()->::apollo::perception::camera::LaneLineCubicCurve::MergeFrom(from.curve_camera_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_curve_image_coord()->::apollo::perception::camera::LaneLineCubicCurve::MergeFrom(from.curve_image_coord());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      track_id_ = from.track_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_type_ = from.use_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      pos_type_ = from.pos_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraLaneLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.CameraLaneLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraLaneLine::CopyFrom(const CameraLaneLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraLaneLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraLaneLine::IsInitialized() const {
  return true;
}

void CameraLaneLine::Swap(CameraLaneLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraLaneLine::InternalSwap(CameraLaneLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&curve_camera_point_set_)->InternalSwap(CastToBase(&other->curve_camera_point_set_));
  CastToBase(&curve_image_point_set_)->InternalSwap(CastToBase(&other->curve_image_point_set_));
  CastToBase(&image_end_point_set_)->InternalSwap(CastToBase(&other->image_end_point_set_));
  swap(curve_camera_coord_, other->curve_camera_coord_);
  swap(curve_image_coord_, other->curve_image_coord_);
  swap(type_, other->type_);
  swap(track_id_, other->track_id_);
  swap(confidence_, other->confidence_);
  swap(use_type_, other->use_type_);
  swap(pos_type_, other->pos_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraLaneLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraCalibrator::InitAsDefaultInstance() {
}
class CameraCalibrator::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CameraCalibrator>()._has_bits_);
  static void set_has_pitch_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camera_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraCalibrator::kPitchAngleFieldNumber;
const int CameraCalibrator::kCameraHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraCalibrator::CameraCalibrator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.CameraCalibrator)
}
CameraCalibrator::CameraCalibrator(const CameraCalibrator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_angle_, &from.pitch_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_height_) -
    reinterpret_cast<char*>(&pitch_angle_)) + sizeof(camera_height_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraCalibrator)
}

void CameraCalibrator::SharedCtor() {
  ::memset(&pitch_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_height_) -
      reinterpret_cast<char*>(&pitch_angle_)) + sizeof(camera_height_));
}

CameraCalibrator::~CameraCalibrator() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraCalibrator)
  SharedDtor();
}

void CameraCalibrator::SharedDtor() {
}

void CameraCalibrator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraCalibrator& CameraCalibrator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraCalibrator_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void CameraCalibrator::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraCalibrator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pitch_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_height_) -
        reinterpret_cast<char*>(&pitch_angle_)) + sizeof(camera_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraCalibrator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float pitch_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          HasBitSetters::set_has_pitch_angle(&has_bits);
          pitch_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float camera_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          HasBitSetters::set_has_camera_height(&has_bits);
          camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraCalibrator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.CameraCalibrator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float pitch_angle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_pitch_angle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera_height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_camera_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.CameraCalibrator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.CameraCalibrator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraCalibrator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.CameraCalibrator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pitch_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->pitch_angle(), output);
  }

  // optional float camera_height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->camera_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.CameraCalibrator)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraCalibrator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraCalibrator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pitch_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->pitch_angle(), target);
  }

  // optional float camera_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->camera_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraCalibrator)
  return target;
}

size_t CameraCalibrator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraCalibrator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float pitch_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float camera_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraCalibrator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.CameraCalibrator)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraCalibrator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraCalibrator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.CameraCalibrator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.CameraCalibrator)
    MergeFrom(*source);
  }
}

void CameraCalibrator::MergeFrom(const CameraCalibrator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraCalibrator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pitch_angle_ = from.pitch_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      camera_height_ = from.camera_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraCalibrator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.CameraCalibrator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibrator::CopyFrom(const CameraCalibrator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraCalibrator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibrator::IsInitialized() const {
  return true;
}

void CameraCalibrator::Swap(CameraCalibrator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraCalibrator::InternalSwap(CameraCalibrator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pitch_angle_, other->pitch_angle_);
  swap(camera_height_, other->camera_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraCalibrator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraObstacle::InitAsDefaultInstance() {
  ::apollo::perception::camera::_CameraObstacle_default_instance_._instance.get_mutable()->obstacle_ = const_cast< ::apollo::perception::PerceptionObstacle*>(
      ::apollo::perception::PerceptionObstacle::internal_default_instance());
  ::apollo::perception::camera::_CameraObstacle_default_instance_._instance.get_mutable()->upper_left_ = const_cast< ::apollo::common::Point2D*>(
      ::apollo::common::Point2D::internal_default_instance());
  ::apollo::perception::camera::_CameraObstacle_default_instance_._instance.get_mutable()->lower_right_ = const_cast< ::apollo::common::Point2D*>(
      ::apollo::common::Point2D::internal_default_instance());
}
class CameraObstacle::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CameraObstacle>()._has_bits_);
  static const ::apollo::perception::PerceptionObstacle& obstacle(const CameraObstacle* msg);
  static void set_has_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point2D& upper_left(const CameraObstacle* msg);
  static void set_has_upper_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point2D& lower_right(const CameraObstacle* msg);
  static void set_has_lower_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::perception::PerceptionObstacle&
CameraObstacle::HasBitSetters::obstacle(const CameraObstacle* msg) {
  return *msg->obstacle_;
}
const ::apollo::common::Point2D&
CameraObstacle::HasBitSetters::upper_left(const CameraObstacle* msg) {
  return *msg->upper_left_;
}
const ::apollo::common::Point2D&
CameraObstacle::HasBitSetters::lower_right(const CameraObstacle* msg) {
  return *msg->lower_right_;
}
void CameraObstacle::clear_obstacle() {
  if (obstacle_ != nullptr) obstacle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CameraObstacle::clear_upper_left() {
  if (upper_left_ != nullptr) upper_left_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CameraObstacle::clear_lower_right() {
  if (lower_right_ != nullptr) lower_right_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CameraObstacle::clear_key_points() {
  key_points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraObstacle::kObstacleFieldNumber;
const int CameraObstacle::kTypeFieldNumber;
const int CameraObstacle::kTypeProbsFieldNumber;
const int CameraObstacle::kUpperLeftFieldNumber;
const int CameraObstacle::kLowerRightFieldNumber;
const int CameraObstacle::kKeyPointsFieldNumber;
const int CameraObstacle::kDebugMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraObstacle::CameraObstacle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.CameraObstacle)
}
CameraObstacle::CameraObstacle(const CameraObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      type_probs_(from.type_probs_),
      key_points_(from.key_points_),
      debug_message_(from.debug_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obstacle()) {
    obstacle_ = new ::apollo::perception::PerceptionObstacle(*from.obstacle_);
  } else {
    obstacle_ = nullptr;
  }
  if (from.has_upper_left()) {
    upper_left_ = new ::apollo::common::Point2D(*from.upper_left_);
  } else {
    upper_left_ = nullptr;
  }
  if (from.has_lower_right()) {
    lower_right_ = new ::apollo::common::Point2D(*from.lower_right_);
  } else {
    lower_right_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraObstacle)
}

void CameraObstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraObstacle_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  ::memset(&obstacle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&obstacle_)) + sizeof(type_));
}

CameraObstacle::~CameraObstacle() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraObstacle)
  SharedDtor();
}

void CameraObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete obstacle_;
  if (this != internal_default_instance()) delete upper_left_;
  if (this != internal_default_instance()) delete lower_right_;
}

void CameraObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraObstacle& CameraObstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraObstacle_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void CameraObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_probs_.Clear();
  key_points_.Clear();
  debug_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(obstacle_ != nullptr);
      obstacle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(upper_left_ != nullptr);
      upper_left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lower_right_ != nullptr);
      lower_right_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.PerceptionObstacle obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_obstacle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::CameraObstacle_CameraType_IsValid(val))) {
            set_type(static_cast<::apollo::perception::camera::CameraObstacle_CameraType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated float type_probs = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_type_probs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 437);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_type_probs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D upper_left = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_upper_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D lower_right = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_lower_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point2D key_points = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_key_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 458);
        } else goto handle_unusual;
        continue;
      // repeated string debug_message = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_debug_message(), ptr, ctx, "apollo.perception.camera.CameraObstacle.debug_message");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 466);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraObstacle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.CameraObstacle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.PerceptionObstacle obstacle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::camera::CameraObstacle_CameraType_IsValid(value)) {
            set_type(static_cast< ::apollo::perception::camera::CameraObstacle_CameraType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float type_probs = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (181 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 181u, input, this->mutable_type_probs())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_type_probs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point2D upper_left = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point2D lower_right = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lower_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Point2D key_points = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_key_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string debug_message = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_debug_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_message(this->debug_message_size() - 1).data(),
            static_cast<int>(this->debug_message(this->debug_message_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.perception.camera.CameraObstacle.debug_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.CameraObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.CameraObstacle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraObstacle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.CameraObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.PerceptionObstacle obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::obstacle(this), output);
  }

  // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      21, this->type(), output);
  }

  // repeated float type_probs = 22;
  for (int i = 0, n = this->type_probs_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      22, this->type_probs(i), output);
  }

  // optional .apollo.common.Point2D upper_left = 23;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, HasBitSetters::upper_left(this), output);
  }

  // optional .apollo.common.Point2D lower_right = 24;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, HasBitSetters::lower_right(this), output);
  }

  // repeated .apollo.common.Point2D key_points = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25,
      this->key_points(static_cast<int>(i)),
      output);
  }

  // repeated string debug_message = 26;
  for (int i = 0, n = this->debug_message_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_message(i).data(), static_cast<int>(this->debug_message(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.CameraObstacle.debug_message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      26, this->debug_message(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.CameraObstacle)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraObstacle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.PerceptionObstacle obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::obstacle(this), target);
  }

  // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->type(), target);
  }

  // repeated float type_probs = 22;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(22, this->type_probs_, target);

  // optional .apollo.common.Point2D upper_left = 23;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, HasBitSetters::upper_left(this), target);
  }

  // optional .apollo.common.Point2D lower_right = 24;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, HasBitSetters::lower_right(this), target);
  }

  // repeated .apollo.common.Point2D key_points = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->key_points(static_cast<int>(i)), target);
  }

  // repeated string debug_message = 26;
  for (int i = 0, n = this->debug_message_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_message(i).data(), static_cast<int>(this->debug_message(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.CameraObstacle.debug_message");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(26, this->debug_message(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraObstacle)
  return target;
}

size_t CameraObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float type_probs = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->type_probs_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->type_probs_size());
    total_size += data_size;
  }

  // repeated .apollo.common.Point2D key_points = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->key_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->key_points(static_cast<int>(i)));
    }
  }

  // repeated string debug_message = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->debug_message_size());
  for (int i = 0, n = this->debug_message_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->debug_message(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.perception.PerceptionObstacle obstacle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obstacle_);
    }

    // optional .apollo.common.Point2D upper_left = 23;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upper_left_);
    }

    // optional .apollo.common.Point2D lower_right = 24;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lower_right_);
    }

    // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.CameraObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.CameraObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.CameraObstacle)
    MergeFrom(*source);
  }
}

void CameraObstacle::MergeFrom(const CameraObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_probs_.MergeFrom(from.type_probs_);
  key_points_.MergeFrom(from.key_points_);
  debug_message_.MergeFrom(from.debug_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_obstacle()->::apollo::perception::PerceptionObstacle::MergeFrom(from.obstacle());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_upper_left()->::apollo::common::Point2D::MergeFrom(from.upper_left());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lower_right()->::apollo::common::Point2D::MergeFrom(from.lower_right());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.CameraObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraObstacle::CopyFrom(const CameraObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraObstacle::IsInitialized() const {
  return true;
}

void CameraObstacle::Swap(CameraObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraObstacle::InternalSwap(CameraObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_probs_.InternalSwap(&other->type_probs_);
  CastToBase(&key_points_)->InternalSwap(CastToBase(&other->key_points_));
  debug_message_.InternalSwap(CastToBase(&other->debug_message_));
  swap(obstacle_, other->obstacle_);
  swap(upper_left_, other->upper_left_);
  swap(lower_right_, other->lower_right_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraObstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraDebug::InitAsDefaultInstance() {
  ::apollo::perception::camera::_CameraDebug_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::perception::camera::_CameraDebug_default_instance_._instance.get_mutable()->camera_calibrator_ = const_cast< ::apollo::perception::camera::CameraCalibrator*>(
      ::apollo::perception::camera::CameraCalibrator::internal_default_instance());
}
class CameraDebug::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CameraDebug>()._has_bits_);
  static const ::apollo::common::Header& header(const CameraDebug* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::camera::CameraCalibrator& camera_calibrator(const CameraDebug* msg);
  static void set_has_camera_calibrator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
CameraDebug::HasBitSetters::header(const CameraDebug* msg) {
  return *msg->header_;
}
const ::apollo::perception::camera::CameraCalibrator&
CameraDebug::HasBitSetters::camera_calibrator(const CameraDebug* msg) {
  return *msg->camera_calibrator_;
}
void CameraDebug::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraDebug::kHeaderFieldNumber;
const int CameraDebug::kSourceTopicFieldNumber;
const int CameraDebug::kErrorCodeFieldNumber;
const int CameraDebug::kCameraCalibratorFieldNumber;
const int CameraDebug::kCameraLanelineFieldNumber;
const int CameraDebug::kCameraObstacleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraDebug::CameraDebug()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.camera.CameraDebug)
}
CameraDebug::CameraDebug(const CameraDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      camera_laneline_(from.camera_laneline_),
      camera_obstacle_(from.camera_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_topic()) {
    source_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_topic_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_camera_calibrator()) {
    camera_calibrator_ = new ::apollo::perception::camera::CameraCalibrator(*from.camera_calibrator_);
  } else {
    camera_calibrator_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraDebug)
}

void CameraDebug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraDebug_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  source_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&header_)) + sizeof(error_code_));
}

CameraDebug::~CameraDebug() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraDebug)
  SharedDtor();
}

void CameraDebug::SharedDtor() {
  source_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete camera_calibrator_;
}

void CameraDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraDebug& CameraDebug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraDebug_modules_2fperception_2fproto_2fperception_5fcamera_2eproto.base);
  return *internal_default_instance();
}


void CameraDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_laneline_.Clear();
  camera_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(camera_calibrator_ != nullptr);
      camera_calibrator_->Clear();
    }
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string source_topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_source_topic(), ptr, ctx, "apollo.perception.camera.CameraDebug.source_topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::CameraErrorCode_IsValid(val))) {
            set_error_code(static_cast<::apollo::perception::camera::CameraErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_camera_calibrator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_camera_laneline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_camera_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraDebug::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.camera.CameraDebug)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source_topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_topic()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_topic().data(), static_cast<int>(this->source_topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.perception.camera.CameraDebug.source_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::camera::CameraErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::apollo::perception::camera::CameraErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_calibrator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_camera_laneline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_camera_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.camera.CameraDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.camera.CameraDebug)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraDebug::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.camera.CameraDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::header(this), output);
  }

  // optional string source_topic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_topic().data(), static_cast<int>(this->source_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.CameraDebug.source_topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_topic(), output);
  }

  // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::camera_calibrator(this), output);
  }

  // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_laneline_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->camera_laneline(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_obstacle_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->camera_obstacle(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.camera.CameraDebug)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDebug::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::header(this), target);
  }

  // optional string source_topic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_topic().data(), static_cast<int>(this->source_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.CameraDebug.source_topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->source_topic(), target);
  }

  // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::camera_calibrator(this), target);
  }

  // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_laneline_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->camera_laneline(static_cast<int>(i)), target);
  }

  // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_obstacle_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->camera_obstacle(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraDebug)
  return target;
}

size_t CameraDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->camera_laneline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->camera_laneline(static_cast<int>(i)));
    }
  }

  // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->camera_obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->camera_obstacle(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string source_topic = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->source_topic());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_calibrator_);
    }

    // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.CameraDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.CameraDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.CameraDebug)
    MergeFrom(*source);
  }
}

void CameraDebug::MergeFrom(const CameraDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_laneline_.MergeFrom(from.camera_laneline_);
  camera_obstacle_.MergeFrom(from.camera_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      source_topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_camera_calibrator()->::apollo::perception::camera::CameraCalibrator::MergeFrom(from.camera_calibrator());
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.CameraDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDebug::CopyFrom(const CameraDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDebug::IsInitialized() const {
  return true;
}

void CameraDebug::Swap(CameraDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraDebug::InternalSwap(CameraDebug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&camera_laneline_)->InternalSwap(CastToBase(&other->camera_laneline_));
  CastToBase(&camera_obstacle_)->InternalSwap(CastToBase(&other->camera_obstacle_));
  source_topic_.Swap(&other->source_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(camera_calibrator_, other->camera_calibrator_);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDebug::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::LaneLineCubicCurve* Arena::CreateMaybeMessage< ::apollo::perception::camera::LaneLineCubicCurve >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::LaneLineCubicCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::EndPoints* Arena::CreateMaybeMessage< ::apollo::perception::camera::EndPoints >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::EndPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraLaneLine* Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraLaneLine >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::CameraLaneLine >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraCalibrator* Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraCalibrator >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::CameraCalibrator >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraObstacle* Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::CameraObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraDebug* Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::camera::CameraDebug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
