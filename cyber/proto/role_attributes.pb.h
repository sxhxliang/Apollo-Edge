// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role_attributes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_role_5fattributes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_role_5fattributes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "qos_profile.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_role_5fattributes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_role_5fattributes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_role_5fattributes_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class RoleAttributes;
class RoleAttributesDefaultTypeInternal;
extern RoleAttributesDefaultTypeInternal _RoleAttributes_default_instance_;
class SocketAddr;
class SocketAddrDefaultTypeInternal;
extern SocketAddrDefaultTypeInternal _SocketAddr_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::proto::RoleAttributes* Arena::CreateMaybeMessage<::apollo::cyber::proto::RoleAttributes>(Arena*);
template<> ::apollo::cyber::proto::SocketAddr* Arena::CreateMaybeMessage<::apollo::cyber::proto::SocketAddr>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class SocketAddr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SocketAddr) */ {
 public:
  SocketAddr();
  virtual ~SocketAddr();

  SocketAddr(const SocketAddr& from);
  SocketAddr(SocketAddr&& from) noexcept
    : SocketAddr() {
    *this = ::std::move(from);
  }

  inline SocketAddr& operator=(const SocketAddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketAddr& operator=(SocketAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SocketAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SocketAddr* internal_default_instance() {
    return reinterpret_cast<const SocketAddr*>(
               &_SocketAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SocketAddr* other);
  friend void swap(SocketAddr& a, SocketAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SocketAddr* New() const final {
    return CreateMaybeMessage<SocketAddr>(nullptr);
  }

  SocketAddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SocketAddr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SocketAddr& from);
  void MergeFrom(const SocketAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SocketAddr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.SocketAddr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_role_5fattributes_2eproto);
    return ::descriptor_table_role_5fattributes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);

  // optional uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SocketAddr)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  friend struct ::TableStruct_role_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class RoleAttributes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.RoleAttributes) */ {
 public:
  RoleAttributes();
  virtual ~RoleAttributes();

  RoleAttributes(const RoleAttributes& from);
  RoleAttributes(RoleAttributes&& from) noexcept
    : RoleAttributes() {
    *this = ::std::move(from);
  }

  inline RoleAttributes& operator=(const RoleAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleAttributes& operator=(RoleAttributes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoleAttributes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleAttributes* internal_default_instance() {
    return reinterpret_cast<const RoleAttributes*>(
               &_RoleAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RoleAttributes* other);
  friend void swap(RoleAttributes& a, RoleAttributes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleAttributes* New() const final {
    return CreateMaybeMessage<RoleAttributes>(nullptr);
  }

  RoleAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleAttributes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoleAttributes& from);
  void MergeFrom(const RoleAttributes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleAttributes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.RoleAttributes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_role_5fattributes_2eproto);
    return ::descriptor_table_role_5fattributes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string host_name = 1;
  bool has_host_name() const;
  void clear_host_name();
  static const int kHostNameFieldNumber = 1;
  const std::string& host_name() const;
  void set_host_name(const std::string& value);
  void set_host_name(std::string&& value);
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  std::string* mutable_host_name();
  std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);

  // optional string host_ip = 2;
  bool has_host_ip() const;
  void clear_host_ip();
  static const int kHostIpFieldNumber = 2;
  const std::string& host_ip() const;
  void set_host_ip(const std::string& value);
  void set_host_ip(std::string&& value);
  void set_host_ip(const char* value);
  void set_host_ip(const char* value, size_t size);
  std::string* mutable_host_ip();
  std::string* release_host_ip();
  void set_allocated_host_ip(std::string* host_ip);

  // optional string node_name = 4;
  bool has_node_name() const;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 4;
  const std::string& node_name() const;
  void set_node_name(const std::string& value);
  void set_node_name(std::string&& value);
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);

  // optional string channel_name = 6;
  bool has_channel_name() const;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 6;
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);

  // optional string message_type = 8;
  bool has_message_type() const;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 8;
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);

  // optional bytes proto_desc = 9;
  bool has_proto_desc() const;
  void clear_proto_desc();
  static const int kProtoDescFieldNumber = 9;
  const std::string& proto_desc() const;
  void set_proto_desc(const std::string& value);
  void set_proto_desc(std::string&& value);
  void set_proto_desc(const char* value);
  void set_proto_desc(const void* value, size_t size);
  std::string* mutable_proto_desc();
  std::string* release_proto_desc();
  void set_allocated_proto_desc(std::string* proto_desc);

  // optional string service_name = 13;
  bool has_service_name() const;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 13;
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);

  // optional .apollo.cyber.proto.QosProfile qos_profile = 11;
  bool has_qos_profile() const;
  void clear_qos_profile();
  static const int kQosProfileFieldNumber = 11;
  const ::apollo::cyber::proto::QosProfile& qos_profile() const;
  ::apollo::cyber::proto::QosProfile* release_qos_profile();
  ::apollo::cyber::proto::QosProfile* mutable_qos_profile();
  void set_allocated_qos_profile(::apollo::cyber::proto::QosProfile* qos_profile);

  // optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
  bool has_socket_addr() const;
  void clear_socket_addr();
  static const int kSocketAddrFieldNumber = 12;
  const ::apollo::cyber::proto::SocketAddr& socket_addr() const;
  ::apollo::cyber::proto::SocketAddr* release_socket_addr();
  ::apollo::cyber::proto::SocketAddr* mutable_socket_addr();
  void set_allocated_socket_addr(::apollo::cyber::proto::SocketAddr* socket_addr);

  // optional uint64 node_id = 5;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 channel_id = 7;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 id = 10;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 service_id = 14;
  bool has_service_id() const;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::uint64 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 communication_priority = 15 [default = 0];
  bool has_communication_priority() const;
  void clear_communication_priority();
  static const int kCommunicationPriorityFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::uint64 communication_priority() const;
  void set_communication_priority(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int32 process_id = 3;
  bool has_process_id() const;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 process_id() const;
  void set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.RoleAttributes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::apollo::cyber::proto::QosProfile* qos_profile_;
  ::apollo::cyber::proto::SocketAddr* socket_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 node_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 service_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 communication_priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 process_id_;
  friend struct ::TableStruct_role_5fattributes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SocketAddr

// optional string ip = 1;
inline bool SocketAddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SocketAddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SocketAddr::ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SocketAddr.ip)
  return ip_.GetNoArena();
}
inline void SocketAddr::set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SocketAddr.ip)
}
inline void SocketAddr::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SocketAddr.ip)
}
inline void SocketAddr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SocketAddr.ip)
}
inline void SocketAddr::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SocketAddr.ip)
}
inline std::string* SocketAddr::mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SocketAddr.ip)
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SocketAddr::release_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SocketAddr.ip)
  if (!has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SocketAddr::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SocketAddr.ip)
}

// optional uint32 port = 2;
inline bool SocketAddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SocketAddr::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SocketAddr::port() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SocketAddr.port)
  return port_;
}
inline void SocketAddr::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SocketAddr.port)
}

// -------------------------------------------------------------------

// RoleAttributes

// optional string host_name = 1;
inline bool RoleAttributes::has_host_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleAttributes::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleAttributes::host_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.host_name)
  return host_name_.GetNoArena();
}
inline void RoleAttributes::set_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.host_name)
}
inline void RoleAttributes::set_host_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  host_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.host_name)
}
inline void RoleAttributes::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.host_name)
}
inline void RoleAttributes::set_host_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.host_name)
}
inline std::string* RoleAttributes::mutable_host_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.host_name)
  return host_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAttributes::release_host_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.host_name)
  if (!has_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return host_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.host_name)
}

// optional string host_ip = 2;
inline bool RoleAttributes::has_host_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleAttributes::clear_host_ip() {
  host_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoleAttributes::host_ip() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.host_ip)
  return host_ip_.GetNoArena();
}
inline void RoleAttributes::set_host_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  host_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.host_ip)
}
inline void RoleAttributes::set_host_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  host_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.host_ip)
}
inline void RoleAttributes::set_host_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  host_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.host_ip)
}
inline void RoleAttributes::set_host_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  host_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.host_ip)
}
inline std::string* RoleAttributes::mutable_host_ip() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.host_ip)
  return host_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAttributes::release_host_ip() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.host_ip)
  if (!has_host_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return host_ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_host_ip(std::string* host_ip) {
  if (host_ip != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  host_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_ip);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.host_ip)
}

// optional int32 process_id = 3;
inline bool RoleAttributes::has_process_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoleAttributes::clear_process_id() {
  process_id_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleAttributes::process_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.process_id)
  return process_id_;
}
inline void RoleAttributes::set_process_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  process_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.process_id)
}

// optional string node_name = 4;
inline bool RoleAttributes::has_node_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleAttributes::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RoleAttributes::node_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.node_name)
  return node_name_.GetNoArena();
}
inline void RoleAttributes::set_node_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  node_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.node_name)
}
inline void RoleAttributes::set_node_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  node_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.node_name)
}
inline void RoleAttributes::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  node_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.node_name)
}
inline void RoleAttributes::set_node_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  node_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.node_name)
}
inline std::string* RoleAttributes::mutable_node_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.node_name)
  return node_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAttributes::release_node_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.node_name)
  if (!has_node_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return node_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  node_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.node_name)
}

// optional uint64 node_id = 5;
inline bool RoleAttributes::has_node_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleAttributes::clear_node_id() {
  node_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleAttributes::node_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.node_id)
  return node_id_;
}
inline void RoleAttributes::set_node_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  node_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.node_id)
}

// optional string channel_name = 6;
inline bool RoleAttributes::has_channel_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleAttributes::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RoleAttributes::channel_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.channel_name)
  return channel_name_.GetNoArena();
}
inline void RoleAttributes::set_channel_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.channel_name)
}
inline void RoleAttributes::set_channel_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  channel_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.channel_name)
}
inline void RoleAttributes::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.channel_name)
}
inline void RoleAttributes::set_channel_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  channel_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.channel_name)
}
inline std::string* RoleAttributes::mutable_channel_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.channel_name)
  return channel_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAttributes::release_channel_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.channel_name)
  if (!has_channel_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return channel_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  channel_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.channel_name)
}

// optional uint64 channel_id = 7;
inline bool RoleAttributes::has_channel_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleAttributes::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleAttributes::channel_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.channel_id)
  return channel_id_;
}
inline void RoleAttributes::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.channel_id)
}

// optional string message_type = 8;
inline bool RoleAttributes::has_message_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleAttributes::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& RoleAttributes::message_type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.message_type)
  return message_type_.GetNoArena();
}
inline void RoleAttributes::set_message_type(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.message_type)
}
inline void RoleAttributes::set_message_type(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  message_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.message_type)
}
inline void RoleAttributes::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.message_type)
}
inline void RoleAttributes::set_message_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.message_type)
}
inline std::string* RoleAttributes::mutable_message_type() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.message_type)
  return message_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAttributes::release_message_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.message_type)
  if (!has_message_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return message_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  message_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.message_type)
}

// optional bytes proto_desc = 9;
inline bool RoleAttributes::has_proto_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleAttributes::clear_proto_desc() {
  proto_desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& RoleAttributes::proto_desc() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.proto_desc)
  return proto_desc_.GetNoArena();
}
inline void RoleAttributes::set_proto_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  proto_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.proto_desc)
}
inline void RoleAttributes::set_proto_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  proto_desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.proto_desc)
}
inline void RoleAttributes::set_proto_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  proto_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.proto_desc)
}
inline void RoleAttributes::set_proto_desc(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  proto_desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.proto_desc)
}
inline std::string* RoleAttributes::mutable_proto_desc() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.proto_desc)
  return proto_desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAttributes::release_proto_desc() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.proto_desc)
  if (!has_proto_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return proto_desc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_proto_desc(std::string* proto_desc) {
  if (proto_desc != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  proto_desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proto_desc);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.proto_desc)
}

// optional uint64 id = 10;
inline bool RoleAttributes::has_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleAttributes::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleAttributes::id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.id)
  return id_;
}
inline void RoleAttributes::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.id)
}

// optional .apollo.cyber.proto.QosProfile qos_profile = 11;
inline bool RoleAttributes::has_qos_profile() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::apollo::cyber::proto::QosProfile& RoleAttributes::qos_profile() const {
  const ::apollo::cyber::proto::QosProfile* p = qos_profile_;
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.qos_profile)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::cyber::proto::QosProfile*>(
      &::apollo::cyber::proto::_QosProfile_default_instance_);
}
inline ::apollo::cyber::proto::QosProfile* RoleAttributes::release_qos_profile() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.qos_profile)
  _has_bits_[0] &= ~0x00000080u;
  ::apollo::cyber::proto::QosProfile* temp = qos_profile_;
  qos_profile_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::QosProfile* RoleAttributes::mutable_qos_profile() {
  _has_bits_[0] |= 0x00000080u;
  if (qos_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::QosProfile>(GetArenaNoVirtual());
    qos_profile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.qos_profile)
  return qos_profile_;
}
inline void RoleAttributes::set_allocated_qos_profile(::apollo::cyber::proto::QosProfile* qos_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(qos_profile_);
  }
  if (qos_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      qos_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qos_profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  qos_profile_ = qos_profile;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.qos_profile)
}

// optional .apollo.cyber.proto.SocketAddr socket_addr = 12;
inline bool RoleAttributes::has_socket_addr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleAttributes::clear_socket_addr() {
  if (socket_addr_ != nullptr) socket_addr_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::cyber::proto::SocketAddr& RoleAttributes::socket_addr() const {
  const ::apollo::cyber::proto::SocketAddr* p = socket_addr_;
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.socket_addr)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::cyber::proto::SocketAddr*>(
      &::apollo::cyber::proto::_SocketAddr_default_instance_);
}
inline ::apollo::cyber::proto::SocketAddr* RoleAttributes::release_socket_addr() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.socket_addr)
  _has_bits_[0] &= ~0x00000100u;
  ::apollo::cyber::proto::SocketAddr* temp = socket_addr_;
  socket_addr_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::SocketAddr* RoleAttributes::mutable_socket_addr() {
  _has_bits_[0] |= 0x00000100u;
  if (socket_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::SocketAddr>(GetArenaNoVirtual());
    socket_addr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.socket_addr)
  return socket_addr_;
}
inline void RoleAttributes::set_allocated_socket_addr(::apollo::cyber::proto::SocketAddr* socket_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete socket_addr_;
  }
  if (socket_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      socket_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, socket_addr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  socket_addr_ = socket_addr;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.socket_addr)
}

// optional string service_name = 13;
inline bool RoleAttributes::has_service_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleAttributes::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& RoleAttributes::service_name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.service_name)
  return service_name_.GetNoArena();
}
inline void RoleAttributes::set_service_name(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.service_name)
}
inline void RoleAttributes::set_service_name(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.RoleAttributes.service_name)
}
inline void RoleAttributes::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.RoleAttributes.service_name)
}
inline void RoleAttributes::set_service_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.RoleAttributes.service_name)
}
inline std::string* RoleAttributes::mutable_service_name() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.RoleAttributes.service_name)
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleAttributes::release_service_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.RoleAttributes.service_name)
  if (!has_service_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return service_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleAttributes::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.RoleAttributes.service_name)
}

// optional uint64 service_id = 14;
inline bool RoleAttributes::has_service_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleAttributes::clear_service_id() {
  service_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleAttributes::service_id() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.service_id)
  return service_id_;
}
inline void RoleAttributes::set_service_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  service_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.service_id)
}

// optional uint64 communication_priority = 15 [default = 0];
inline bool RoleAttributes::has_communication_priority() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleAttributes::clear_communication_priority() {
  communication_priority_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoleAttributes::communication_priority() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.RoleAttributes.communication_priority)
  return communication_priority_;
}
inline void RoleAttributes::set_communication_priority(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  communication_priority_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.RoleAttributes.communication_priority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_role_5fattributes_2eproto
