// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduler_conf.proto

#include "scheduler_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_choreography_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChoreographyConf_choreography_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_classic_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassicConf_classic_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scheduler_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InnerThread_scheduler_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class InnerThreadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InnerThread> _instance;
} _InnerThread_default_instance_;
class SchedulerConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SchedulerConf> _instance;
} _SchedulerConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static void InitDefaultsscc_info_InnerThread_scheduler_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_InnerThread_default_instance_;
    new (ptr) ::apollo::cyber::proto::InnerThread();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::InnerThread::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InnerThread_scheduler_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InnerThread_scheduler_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_SchedulerConf_scheduler_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_SchedulerConf_default_instance_;
    new (ptr) ::apollo::cyber::proto::SchedulerConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::SchedulerConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SchedulerConf_scheduler_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SchedulerConf_scheduler_5fconf_2eproto}, {
      &scc_info_InnerThread_scheduler_5fconf_2eproto.base,
      &scc_info_ClassicConf_classic_5fconf_2eproto.base,
      &scc_info_ChoreographyConf_choreography_5fconf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scheduler_5fconf_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_scheduler_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scheduler_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scheduler_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, cpuset_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::InnerThread, prio_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, policy_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, routine_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, default_proc_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, process_level_cpuset_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, threads_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, classic_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::SchedulerConf, choreography_conf_),
  0,
  4,
  5,
  1,
  ~0u,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::cyber::proto::InnerThread)},
  { 13, 25, sizeof(::apollo::cyber::proto::SchedulerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_InnerThread_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_SchedulerConf_default_instance_),
};

const char descriptor_table_protodef_scheduler_5fconf_2eproto[] =
  "\n\024scheduler_conf.proto\022\022apollo.cyber.pro"
  "to\032\022classic_conf.proto\032\027choreography_con"
  "f.proto\"L\n\013InnerThread\022\014\n\004name\030\001 \001(\t\022\016\n\006"
  "cpuset\030\002 \001(\t\022\016\n\006policy\030\003 \001(\t\022\017\n\004prio\030\004 \001"
  "(\r:\0011\"\226\002\n\rSchedulerConf\022\016\n\006policy\030\001 \001(\t\022"
  "\023\n\013routine_num\030\002 \001(\r\022\030\n\020default_proc_num"
  "\030\003 \001(\r\022\034\n\024process_level_cpuset\030\004 \001(\t\0220\n\007"
  "threads\030\005 \003(\0132\037.apollo.cyber.proto.Inner"
  "Thread\0225\n\014classic_conf\030\006 \001(\0132\037.apollo.cy"
  "ber.proto.ClassicConf\022\?\n\021choreography_co"
  "nf\030\007 \001(\0132$.apollo.cyber.proto.Choreograp"
  "hyConf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scheduler_5fconf_2eproto_deps[2] = {
  &::descriptor_table_choreography_5fconf_2eproto,
  &::descriptor_table_classic_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scheduler_5fconf_2eproto_sccs[2] = {
  &scc_info_InnerThread_scheduler_5fconf_2eproto.base,
  &scc_info_SchedulerConf_scheduler_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scheduler_5fconf_2eproto_once;
static bool descriptor_table_scheduler_5fconf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scheduler_5fconf_2eproto = {
  &descriptor_table_scheduler_5fconf_2eproto_initialized, descriptor_table_protodef_scheduler_5fconf_2eproto, "scheduler_conf.proto", 446,
  &descriptor_table_scheduler_5fconf_2eproto_once, descriptor_table_scheduler_5fconf_2eproto_sccs, descriptor_table_scheduler_5fconf_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_scheduler_5fconf_2eproto::offsets,
  file_level_metadata_scheduler_5fconf_2eproto, 2, file_level_enum_descriptors_scheduler_5fconf_2eproto, file_level_service_descriptors_scheduler_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scheduler_5fconf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scheduler_5fconf_2eproto), true);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

void InnerThread::InitAsDefaultInstance() {
}
class InnerThread::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<InnerThread>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InnerThread::kNameFieldNumber;
const int InnerThread::kCpusetFieldNumber;
const int InnerThread::kPolicyFieldNumber;
const int InnerThread::kPrioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InnerThread::InnerThread()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.InnerThread)
}
InnerThread::InnerThread(const InnerThread& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cpuset()) {
    cpuset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpuset_);
  }
  policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy()) {
    policy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_);
  }
  prio_ = from.prio_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.InnerThread)
}

void InnerThread::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InnerThread_scheduler_5fconf_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prio_ = 1u;
}

InnerThread::~InnerThread() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.InnerThread)
  SharedDtor();
}

void InnerThread::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpuset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InnerThread::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InnerThread& InnerThread::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InnerThread_scheduler_5fconf_2eproto.base);
  return *internal_default_instance();
}


void InnerThread::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.InnerThread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      cpuset_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      policy_.ClearNonDefaultToEmptyNoArena();
    }
    prio_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InnerThread::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "apollo.cyber.proto.InnerThread.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cpuset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_cpuset(), ptr, ctx, "apollo.cyber.proto.InnerThread.cpuset");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_policy(), ptr, ctx, "apollo.cyber.proto.InnerThread.policy");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prio = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_prio(&has_bits);
          prio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InnerThread::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.InnerThread)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.InnerThread.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cpuset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuset()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cpuset().data(), static_cast<int>(this->cpuset().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.InnerThread.cpuset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy().data(), static_cast<int>(this->policy().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.InnerThread.policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prio = 4 [default = 1];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_prio(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.InnerThread)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.InnerThread)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InnerThread::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.InnerThread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string cpuset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpuset().data(), static_cast<int>(this->cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.cpuset");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cpuset(), output);
  }

  // optional string policy = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), static_cast<int>(this->policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.policy");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->policy(), output);
  }

  // optional uint32 prio = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->prio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.InnerThread)
}

::PROTOBUF_NAMESPACE_ID::uint8* InnerThread::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.InnerThread)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string cpuset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpuset().data(), static_cast<int>(this->cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.cpuset");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->cpuset(), target);
  }

  // optional string policy = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), static_cast<int>(this->policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.InnerThread.policy");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->policy(), target);
  }

  // optional uint32 prio = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->prio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.InnerThread)
  return target;
}

size_t InnerThread::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.InnerThread)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string cpuset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cpuset());
    }

    // optional string policy = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy());
    }

    // optional uint32 prio = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->prio());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InnerThread::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.InnerThread)
  GOOGLE_DCHECK_NE(&from, this);
  const InnerThread* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InnerThread>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.InnerThread)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.InnerThread)
    MergeFrom(*source);
  }
}

void InnerThread::MergeFrom(const InnerThread& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.InnerThread)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      cpuset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cpuset_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      policy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_);
    }
    if (cached_has_bits & 0x00000008u) {
      prio_ = from.prio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InnerThread::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.InnerThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InnerThread::CopyFrom(const InnerThread& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.InnerThread)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerThread::IsInitialized() const {
  return true;
}

void InnerThread::Swap(InnerThread* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InnerThread::InternalSwap(InnerThread* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cpuset_.Swap(&other->cpuset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  policy_.Swap(&other->policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prio_, other->prio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerThread::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SchedulerConf::InitAsDefaultInstance() {
  ::apollo::cyber::proto::_SchedulerConf_default_instance_._instance.get_mutable()->classic_conf_ = const_cast< ::apollo::cyber::proto::ClassicConf*>(
      ::apollo::cyber::proto::ClassicConf::internal_default_instance());
  ::apollo::cyber::proto::_SchedulerConf_default_instance_._instance.get_mutable()->choreography_conf_ = const_cast< ::apollo::cyber::proto::ChoreographyConf*>(
      ::apollo::cyber::proto::ChoreographyConf::internal_default_instance());
}
class SchedulerConf::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<SchedulerConf>()._has_bits_);
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_routine_num(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_proc_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_process_level_cpuset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::cyber::proto::ClassicConf& classic_conf(const SchedulerConf* msg);
  static void set_has_classic_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::cyber::proto::ChoreographyConf& choreography_conf(const SchedulerConf* msg);
  static void set_has_choreography_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::cyber::proto::ClassicConf&
SchedulerConf::HasBitSetters::classic_conf(const SchedulerConf* msg) {
  return *msg->classic_conf_;
}
const ::apollo::cyber::proto::ChoreographyConf&
SchedulerConf::HasBitSetters::choreography_conf(const SchedulerConf* msg) {
  return *msg->choreography_conf_;
}
void SchedulerConf::clear_classic_conf() {
  if (classic_conf_ != nullptr) classic_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SchedulerConf::clear_choreography_conf() {
  if (choreography_conf_ != nullptr) choreography_conf_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SchedulerConf::kPolicyFieldNumber;
const int SchedulerConf::kRoutineNumFieldNumber;
const int SchedulerConf::kDefaultProcNumFieldNumber;
const int SchedulerConf::kProcessLevelCpusetFieldNumber;
const int SchedulerConf::kThreadsFieldNumber;
const int SchedulerConf::kClassicConfFieldNumber;
const int SchedulerConf::kChoreographyConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SchedulerConf::SchedulerConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.SchedulerConf)
}
SchedulerConf::SchedulerConf(const SchedulerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      threads_(from.threads_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy()) {
    policy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_);
  }
  process_level_cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_level_cpuset()) {
    process_level_cpuset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_level_cpuset_);
  }
  if (from.has_classic_conf()) {
    classic_conf_ = new ::apollo::cyber::proto::ClassicConf(*from.classic_conf_);
  } else {
    classic_conf_ = nullptr;
  }
  if (from.has_choreography_conf()) {
    choreography_conf_ = new ::apollo::cyber::proto::ChoreographyConf(*from.choreography_conf_);
  } else {
    choreography_conf_ = nullptr;
  }
  ::memcpy(&routine_num_, &from.routine_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_proc_num_) -
    reinterpret_cast<char*>(&routine_num_)) + sizeof(default_proc_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.SchedulerConf)
}

void SchedulerConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SchedulerConf_scheduler_5fconf_2eproto.base);
  policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_level_cpuset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&classic_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_proc_num_) -
      reinterpret_cast<char*>(&classic_conf_)) + sizeof(default_proc_num_));
}

SchedulerConf::~SchedulerConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.SchedulerConf)
  SharedDtor();
}

void SchedulerConf::SharedDtor() {
  policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_level_cpuset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete classic_conf_;
  if (this != internal_default_instance()) delete choreography_conf_;
}

void SchedulerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SchedulerConf& SchedulerConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SchedulerConf_scheduler_5fconf_2eproto.base);
  return *internal_default_instance();
}


void SchedulerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.SchedulerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  threads_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      policy_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      process_level_cpuset_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(classic_conf_ != nullptr);
      classic_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(choreography_conf_ != nullptr);
      choreography_conf_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&routine_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_proc_num_) -
        reinterpret_cast<char*>(&routine_num_)) + sizeof(default_proc_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SchedulerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_policy(), ptr, ctx, "apollo.cyber.proto.SchedulerConf.policy");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 routine_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_routine_num(&has_bits);
          routine_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 default_proc_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_default_proc_num(&has_bits);
          default_proc_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string process_level_cpuset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_process_level_cpuset(), ptr, ctx, "apollo.cyber.proto.SchedulerConf.process_level_cpuset");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.cyber.proto.InnerThread threads = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_threads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_classic_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_choreography_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SchedulerConf::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.SchedulerConf)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string policy = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy().data(), static_cast<int>(this->policy().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.SchedulerConf.policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 routine_num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_routine_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routine_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 default_proc_num = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_default_proc_num(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_proc_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string process_level_cpuset = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_process_level_cpuset()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_level_cpuset().data(), static_cast<int>(this->process_level_cpuset().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.SchedulerConf.process_level_cpuset");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.cyber.proto.InnerThread threads = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_threads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classic_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_choreography_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.SchedulerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.SchedulerConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SchedulerConf::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.SchedulerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), static_cast<int>(this->policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.policy");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->policy(), output);
  }

  // optional uint32 routine_num = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->routine_num(), output);
  }

  // optional uint32 default_proc_num = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->default_proc_num(), output);
  }

  // optional string process_level_cpuset = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_level_cpuset().data(), static_cast<int>(this->process_level_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.process_level_cpuset");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->process_level_cpuset(), output);
  }

  // repeated .apollo.cyber.proto.InnerThread threads = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->threads_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->threads(static_cast<int>(i)),
      output);
  }

  // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::classic_conf(this), output);
  }

  // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::choreography_conf(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.SchedulerConf)
}

::PROTOBUF_NAMESPACE_ID::uint8* SchedulerConf::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.SchedulerConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), static_cast<int>(this->policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.policy");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->policy(), target);
  }

  // optional uint32 routine_num = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->routine_num(), target);
  }

  // optional uint32 default_proc_num = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->default_proc_num(), target);
  }

  // optional string process_level_cpuset = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_level_cpuset().data(), static_cast<int>(this->process_level_cpuset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.SchedulerConf.process_level_cpuset");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->process_level_cpuset(), target);
  }

  // repeated .apollo.cyber.proto.InnerThread threads = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->threads_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->threads(static_cast<int>(i)), target);
  }

  // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::classic_conf(this), target);
  }

  // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::choreography_conf(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.SchedulerConf)
  return target;
}

size_t SchedulerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.SchedulerConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.InnerThread threads = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->threads_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->threads(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string policy = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->policy());
    }

    // optional string process_level_cpuset = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->process_level_cpuset());
    }

    // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *classic_conf_);
    }

    // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choreography_conf_);
    }

    // optional uint32 routine_num = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->routine_num());
    }

    // optional uint32 default_proc_num = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->default_proc_num());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchedulerConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.SchedulerConf)
  GOOGLE_DCHECK_NE(&from, this);
  const SchedulerConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SchedulerConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.SchedulerConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.SchedulerConf)
    MergeFrom(*source);
  }
}

void SchedulerConf::MergeFrom(const SchedulerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.SchedulerConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  threads_.MergeFrom(from.threads_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      policy_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.policy_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      process_level_cpuset_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_level_cpuset_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_classic_conf()->::apollo::cyber::proto::ClassicConf::MergeFrom(from.classic_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_choreography_conf()->::apollo::cyber::proto::ChoreographyConf::MergeFrom(from.choreography_conf());
    }
    if (cached_has_bits & 0x00000010u) {
      routine_num_ = from.routine_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_proc_num_ = from.default_proc_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchedulerConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.SchedulerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SchedulerConf::CopyFrom(const SchedulerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.SchedulerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulerConf::IsInitialized() const {
  if (has_classic_conf()) {
    if (!this->classic_conf_->IsInitialized()) return false;
  }
  return true;
}

void SchedulerConf::Swap(SchedulerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SchedulerConf::InternalSwap(SchedulerConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&threads_)->InternalSwap(CastToBase(&other->threads_));
  policy_.Swap(&other->policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  process_level_cpuset_.Swap(&other->process_level_cpuset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(classic_conf_, other->classic_conf_);
  swap(choreography_conf_, other->choreography_conf_);
  swap(routine_num_, other->routine_num_);
  swap(default_proc_num_, other->default_proc_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SchedulerConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::InnerThread* Arena::CreateMaybeMessage< ::apollo::cyber::proto::InnerThread >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::InnerThread >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::SchedulerConf* Arena::CreateMaybeMessage< ::apollo::cyber::proto::SchedulerConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::SchedulerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
