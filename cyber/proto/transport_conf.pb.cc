// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_conf.proto

#include "transport_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationMode_transport_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceLimit_transport_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtpsParticipantAttr_transport_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShmConf_transport_5fconf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShmMulticastLocator_transport_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class ShmMulticastLocatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShmMulticastLocator> _instance;
} _ShmMulticastLocator_default_instance_;
class ShmConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShmConf> _instance;
} _ShmConf_default_instance_;
class RtpsParticipantAttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RtpsParticipantAttr> _instance;
} _RtpsParticipantAttr_default_instance_;
class CommunicationModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunicationMode> _instance;
} _CommunicationMode_default_instance_;
class ResourceLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceLimit> _instance;
} _ResourceLimit_default_instance_;
class TransportConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportConf> _instance;
} _TransportConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static void InitDefaultsscc_info_CommunicationMode_transport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_CommunicationMode_default_instance_;
    new (ptr) ::apollo::cyber::proto::CommunicationMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::CommunicationMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommunicationMode_transport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CommunicationMode_transport_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_ResourceLimit_transport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ResourceLimit_default_instance_;
    new (ptr) ::apollo::cyber::proto::ResourceLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::ResourceLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceLimit_transport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResourceLimit_transport_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_RtpsParticipantAttr_transport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_RtpsParticipantAttr_default_instance_;
    new (ptr) ::apollo::cyber::proto::RtpsParticipantAttr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::RtpsParticipantAttr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RtpsParticipantAttr_transport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RtpsParticipantAttr_transport_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_ShmConf_transport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ShmConf_default_instance_;
    new (ptr) ::apollo::cyber::proto::ShmConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::ShmConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShmConf_transport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ShmConf_transport_5fconf_2eproto}, {
      &scc_info_ShmMulticastLocator_transport_5fconf_2eproto.base,}};

static void InitDefaultsscc_info_ShmMulticastLocator_transport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ShmMulticastLocator_default_instance_;
    new (ptr) ::apollo::cyber::proto::ShmMulticastLocator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::ShmMulticastLocator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShmMulticastLocator_transport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ShmMulticastLocator_transport_5fconf_2eproto}, {}};

static void InitDefaultsscc_info_TransportConf_transport_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_TransportConf_default_instance_;
    new (ptr) ::apollo::cyber::proto::TransportConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::TransportConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TransportConf_transport_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_TransportConf_transport_5fconf_2eproto}, {
      &scc_info_ShmConf_transport_5fconf_2eproto.base,
      &scc_info_RtpsParticipantAttr_transport_5fconf_2eproto.base,
      &scc_info_CommunicationMode_transport_5fconf_2eproto.base,
      &scc_info_ResourceLimit_transport_5fconf_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fconf_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_transport_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, ip_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmMulticastLocator, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, notifier_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, shm_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, shm_locator_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ShmConf, use_async_read_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, lease_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, announcement_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, domain_id_gain_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::RtpsParticipantAttr, port_base_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, same_proc_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, diff_proc_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::CommunicationMode, diff_host_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ResourceLimit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ResourceLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ResourceLimit, max_history_depth_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, shm_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, participant_attr_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, communication_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TransportConf, resource_limit_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::cyber::proto::ShmMulticastLocator)},
  { 9, 18, sizeof(::apollo::cyber::proto::ShmConf)},
  { 22, 31, sizeof(::apollo::cyber::proto::RtpsParticipantAttr)},
  { 35, 43, sizeof(::apollo::cyber::proto::CommunicationMode)},
  { 46, 52, sizeof(::apollo::cyber::proto::ResourceLimit)},
  { 53, 62, sizeof(::apollo::cyber::proto::TransportConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ShmMulticastLocator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ShmConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_RtpsParticipantAttr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_CommunicationMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ResourceLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_TransportConf_default_instance_),
};

const char descriptor_table_protodef_transport_5fconf_2eproto[] =
  "\n\024transport_conf.proto\022\022apollo.cyber.pro"
  "to\"/\n\023ShmMulticastLocator\022\n\n\002ip\030\001 \001(\t\022\014\n"
  "\004port\030\002 \001(\r\"\210\001\n\007ShmConf\022\025\n\rnotifier_type"
  "\030\001 \001(\t\022\020\n\010shm_type\030\002 \001(\t\022<\n\013shm_locator\030"
  "\003 \001(\0132\'.apollo.cyber.proto.ShmMulticastL"
  "ocator\022\026\n\016use_async_read\030\004 \001(\010\"\210\001\n\023RtpsP"
  "articipantAttr\022\032\n\016lease_duration\030\001 \001(\005:\002"
  "12\022\036\n\023announcement_period\030\002 \001(\005:\0013\022\033\n\016do"
  "main_id_gain\030\003 \001(\r:\003200\022\030\n\tport_base\030\004 \001"
  "(\r:\00510000\"\304\001\n\021CommunicationMode\022:\n\tsame_"
  "proc\030\001 \001(\0162 .apollo.cyber.proto.Optional"
  "Mode:\005INTRA\0228\n\tdiff_proc\030\002 \001(\0162 .apollo."
  "cyber.proto.OptionalMode:\003SHM\0229\n\tdiff_ho"
  "st\030\003 \001(\0162 .apollo.cyber.proto.OptionalMo"
  "de:\004RTPS\"0\n\rResourceLimit\022\037\n\021max_history"
  "_depth\030\001 \001(\r:\0041000\"\377\001\n\rTransportConf\022-\n\010"
  "shm_conf\030\001 \001(\0132\033.apollo.cyber.proto.ShmC"
  "onf\022A\n\020participant_attr\030\002 \001(\0132\'.apollo.c"
  "yber.proto.RtpsParticipantAttr\022A\n\022commun"
  "ication_mode\030\003 \001(\0132%.apollo.cyber.proto."
  "CommunicationMode\0229\n\016resource_limit\030\004 \001("
  "\0132!.apollo.cyber.proto.ResourceLimit*8\n\014"
  "OptionalMode\022\n\n\006HYBRID\020\000\022\t\n\005INTRA\020\001\022\007\n\003S"
  "HM\020\002\022\010\n\004RTPS\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fconf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5fconf_2eproto_sccs[6] = {
  &scc_info_CommunicationMode_transport_5fconf_2eproto.base,
  &scc_info_ResourceLimit_transport_5fconf_2eproto.base,
  &scc_info_RtpsParticipantAttr_transport_5fconf_2eproto.base,
  &scc_info_ShmConf_transport_5fconf_2eproto.base,
  &scc_info_ShmMulticastLocator_transport_5fconf_2eproto.base,
  &scc_info_TransportConf_transport_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fconf_2eproto_once;
static bool descriptor_table_transport_5fconf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fconf_2eproto = {
  &descriptor_table_transport_5fconf_2eproto_initialized, descriptor_table_protodef_transport_5fconf_2eproto, "transport_conf.proto", 934,
  &descriptor_table_transport_5fconf_2eproto_once, descriptor_table_transport_5fconf_2eproto_sccs, descriptor_table_transport_5fconf_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_transport_5fconf_2eproto::offsets,
  file_level_metadata_transport_5fconf_2eproto, 6, file_level_enum_descriptors_transport_5fconf_2eproto, file_level_service_descriptors_transport_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5fconf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5fconf_2eproto), true);
namespace apollo {
namespace cyber {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OptionalMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fconf_2eproto);
  return file_level_enum_descriptors_transport_5fconf_2eproto[0];
}
bool OptionalMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ShmMulticastLocator::InitAsDefaultInstance() {
}
class ShmMulticastLocator::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ShmMulticastLocator>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShmMulticastLocator::kIpFieldNumber;
const int ShmMulticastLocator::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShmMulticastLocator::ShmMulticastLocator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ShmMulticastLocator)
}
ShmMulticastLocator::ShmMulticastLocator(const ShmMulticastLocator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ShmMulticastLocator)
}

void ShmMulticastLocator::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShmMulticastLocator_transport_5fconf_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
}

ShmMulticastLocator::~ShmMulticastLocator() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ShmMulticastLocator)
  SharedDtor();
}

void ShmMulticastLocator::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShmMulticastLocator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShmMulticastLocator& ShmMulticastLocator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShmMulticastLocator_transport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ShmMulticastLocator::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ShmMulticastLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmptyNoArena();
  }
  port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShmMulticastLocator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_ip(), ptr, ctx, "apollo.cyber.proto.ShmMulticastLocator.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShmMulticastLocator::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ShmMulticastLocator)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ShmMulticastLocator.ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_port(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ShmMulticastLocator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ShmMulticastLocator)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShmMulticastLocator::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ShmMulticastLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmMulticastLocator.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ShmMulticastLocator)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShmMulticastLocator::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ShmMulticastLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmMulticastLocator.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ShmMulticastLocator)
  return target;
}

size_t ShmMulticastLocator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ShmMulticastLocator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShmMulticastLocator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ShmMulticastLocator)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmMulticastLocator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShmMulticastLocator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ShmMulticastLocator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ShmMulticastLocator)
    MergeFrom(*source);
  }
}

void ShmMulticastLocator::MergeFrom(const ShmMulticastLocator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ShmMulticastLocator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShmMulticastLocator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ShmMulticastLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmMulticastLocator::CopyFrom(const ShmMulticastLocator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ShmMulticastLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmMulticastLocator::IsInitialized() const {
  return true;
}

void ShmMulticastLocator::Swap(ShmMulticastLocator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShmMulticastLocator::InternalSwap(ShmMulticastLocator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShmMulticastLocator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShmConf::InitAsDefaultInstance() {
  ::apollo::cyber::proto::_ShmConf_default_instance_._instance.get_mutable()->shm_locator_ = const_cast< ::apollo::cyber::proto::ShmMulticastLocator*>(
      ::apollo::cyber::proto::ShmMulticastLocator::internal_default_instance());
}
class ShmConf::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ShmConf>()._has_bits_);
  static void set_has_notifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::cyber::proto::ShmMulticastLocator& shm_locator(const ShmConf* msg);
  static void set_has_shm_locator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_async_read(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::cyber::proto::ShmMulticastLocator&
ShmConf::HasBitSetters::shm_locator(const ShmConf* msg) {
  return *msg->shm_locator_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShmConf::kNotifierTypeFieldNumber;
const int ShmConf::kShmTypeFieldNumber;
const int ShmConf::kShmLocatorFieldNumber;
const int ShmConf::kUseAsyncReadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShmConf::ShmConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ShmConf)
}
ShmConf::ShmConf(const ShmConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notifier_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_notifier_type()) {
    notifier_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notifier_type_);
  }
  shm_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_shm_type()) {
    shm_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shm_type_);
  }
  if (from.has_shm_locator()) {
    shm_locator_ = new ::apollo::cyber::proto::ShmMulticastLocator(*from.shm_locator_);
  } else {
    shm_locator_ = nullptr;
  }
  use_async_read_ = from.use_async_read_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ShmConf)
}

void ShmConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShmConf_transport_5fconf_2eproto.base);
  notifier_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shm_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shm_locator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_async_read_) -
      reinterpret_cast<char*>(&shm_locator_)) + sizeof(use_async_read_));
}

ShmConf::~ShmConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ShmConf)
  SharedDtor();
}

void ShmConf::SharedDtor() {
  notifier_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shm_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shm_locator_;
}

void ShmConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShmConf& ShmConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShmConf_transport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ShmConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ShmConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      notifier_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      shm_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(shm_locator_ != nullptr);
      shm_locator_->Clear();
    }
  }
  use_async_read_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShmConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string notifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_notifier_type(), ptr, ctx, "apollo.cyber.proto.ShmConf.notifier_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string shm_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_shm_type(), ptr, ctx, "apollo.cyber.proto.ShmConf.shm_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_shm_locator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_async_read = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_use_async_read(&has_bits);
          use_async_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShmConf::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ShmConf)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notifier_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_notifier_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notifier_type().data(), static_cast<int>(this->notifier_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ShmConf.notifier_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string shm_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_shm_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shm_type().data(), static_cast<int>(this->shm_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ShmConf.shm_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shm_locator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_async_read = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_use_async_read(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_async_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ShmConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ShmConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShmConf::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ShmConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notifier_type().data(), static_cast<int>(this->notifier_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.notifier_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->notifier_type(), output);
  }

  // optional string shm_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shm_type().data(), static_cast<int>(this->shm_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.shm_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->shm_type(), output);
  }

  // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::shm_locator(this), output);
  }

  // optional bool use_async_read = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->use_async_read(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ShmConf)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShmConf::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ShmConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notifier_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notifier_type().data(), static_cast<int>(this->notifier_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.notifier_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->notifier_type(), target);
  }

  // optional string shm_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shm_type().data(), static_cast<int>(this->shm_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ShmConf.shm_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->shm_type(), target);
  }

  // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::shm_locator(this), target);
  }

  // optional bool use_async_read = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->use_async_read(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ShmConf)
  return target;
}

size_t ShmConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ShmConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string notifier_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->notifier_type());
    }

    // optional string shm_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->shm_type());
    }

    // optional .apollo.cyber.proto.ShmMulticastLocator shm_locator = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shm_locator_);
    }

    // optional bool use_async_read = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShmConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ShmConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ShmConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShmConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ShmConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ShmConf)
    MergeFrom(*source);
  }
}

void ShmConf::MergeFrom(const ShmConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ShmConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      notifier_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notifier_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      shm_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shm_type_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_shm_locator()->::apollo::cyber::proto::ShmMulticastLocator::MergeFrom(from.shm_locator());
    }
    if (cached_has_bits & 0x00000008u) {
      use_async_read_ = from.use_async_read_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShmConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ShmConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShmConf::CopyFrom(const ShmConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ShmConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShmConf::IsInitialized() const {
  return true;
}

void ShmConf::Swap(ShmConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShmConf::InternalSwap(ShmConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notifier_type_.Swap(&other->notifier_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shm_type_.Swap(&other->shm_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shm_locator_, other->shm_locator_);
  swap(use_async_read_, other->use_async_read_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShmConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RtpsParticipantAttr::InitAsDefaultInstance() {
}
class RtpsParticipantAttr::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<RtpsParticipantAttr>()._has_bits_);
  static void set_has_lease_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_announcement_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_domain_id_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port_base(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtpsParticipantAttr::kLeaseDurationFieldNumber;
const int RtpsParticipantAttr::kAnnouncementPeriodFieldNumber;
const int RtpsParticipantAttr::kDomainIdGainFieldNumber;
const int RtpsParticipantAttr::kPortBaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtpsParticipantAttr::RtpsParticipantAttr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.RtpsParticipantAttr)
}
RtpsParticipantAttr::RtpsParticipantAttr(const RtpsParticipantAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lease_duration_, &from.lease_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_base_) -
    reinterpret_cast<char*>(&lease_duration_)) + sizeof(port_base_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.RtpsParticipantAttr)
}

void RtpsParticipantAttr::SharedCtor() {
  lease_duration_ = 12;
  announcement_period_ = 3;
  domain_id_gain_ = 200u;
  port_base_ = 10000u;
}

RtpsParticipantAttr::~RtpsParticipantAttr() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.RtpsParticipantAttr)
  SharedDtor();
}

void RtpsParticipantAttr::SharedDtor() {
}

void RtpsParticipantAttr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtpsParticipantAttr& RtpsParticipantAttr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RtpsParticipantAttr_transport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void RtpsParticipantAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.RtpsParticipantAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    lease_duration_ = 12;
    announcement_period_ = 3;
    domain_id_gain_ = 200u;
    port_base_ = 10000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RtpsParticipantAttr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 lease_duration = 1 [default = 12];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_lease_duration(&has_bits);
          lease_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 announcement_period = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          HasBitSetters::set_has_announcement_period(&has_bits);
          announcement_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 domain_id_gain = 3 [default = 200];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_domain_id_gain(&has_bits);
          domain_id_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 port_base = 4 [default = 10000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_port_base(&has_bits);
          port_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RtpsParticipantAttr::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.RtpsParticipantAttr)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lease_duration = 1 [default = 12];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_lease_duration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lease_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 announcement_period = 2 [default = 3];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_announcement_period(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &announcement_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 domain_id_gain = 3 [default = 200];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_domain_id_gain(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domain_id_gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port_base = 4 [default = 10000];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_port_base(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.RtpsParticipantAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.RtpsParticipantAttr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RtpsParticipantAttr::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.RtpsParticipantAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lease_duration = 1 [default = 12];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->lease_duration(), output);
  }

  // optional int32 announcement_period = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->announcement_period(), output);
  }

  // optional uint32 domain_id_gain = 3 [default = 200];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->domain_id_gain(), output);
  }

  // optional uint32 port_base = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->port_base(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.RtpsParticipantAttr)
}

::PROTOBUF_NAMESPACE_ID::uint8* RtpsParticipantAttr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.RtpsParticipantAttr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lease_duration = 1 [default = 12];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->lease_duration(), target);
  }

  // optional int32 announcement_period = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->announcement_period(), target);
  }

  // optional uint32 domain_id_gain = 3 [default = 200];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->domain_id_gain(), target);
  }

  // optional uint32 port_base = 4 [default = 10000];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->port_base(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.RtpsParticipantAttr)
  return target;
}

size_t RtpsParticipantAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.RtpsParticipantAttr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 lease_duration = 1 [default = 12];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lease_duration());
    }

    // optional int32 announcement_period = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->announcement_period());
    }

    // optional uint32 domain_id_gain = 3 [default = 200];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->domain_id_gain());
    }

    // optional uint32 port_base = 4 [default = 10000];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->port_base());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtpsParticipantAttr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  GOOGLE_DCHECK_NE(&from, this);
  const RtpsParticipantAttr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtpsParticipantAttr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.RtpsParticipantAttr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.RtpsParticipantAttr)
    MergeFrom(*source);
  }
}

void RtpsParticipantAttr::MergeFrom(const RtpsParticipantAttr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lease_duration_ = from.lease_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_period_ = from.announcement_period_;
    }
    if (cached_has_bits & 0x00000004u) {
      domain_id_gain_ = from.domain_id_gain_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_base_ = from.port_base_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtpsParticipantAttr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtpsParticipantAttr::CopyFrom(const RtpsParticipantAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.RtpsParticipantAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtpsParticipantAttr::IsInitialized() const {
  return true;
}

void RtpsParticipantAttr::Swap(RtpsParticipantAttr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtpsParticipantAttr::InternalSwap(RtpsParticipantAttr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lease_duration_, other->lease_duration_);
  swap(announcement_period_, other->announcement_period_);
  swap(domain_id_gain_, other->domain_id_gain_);
  swap(port_base_, other->port_base_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtpsParticipantAttr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommunicationMode::InitAsDefaultInstance() {
}
class CommunicationMode::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CommunicationMode>()._has_bits_);
  static void set_has_same_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_diff_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_diff_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommunicationMode::kSameProcFieldNumber;
const int CommunicationMode::kDiffProcFieldNumber;
const int CommunicationMode::kDiffHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommunicationMode::CommunicationMode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.CommunicationMode)
}
CommunicationMode::CommunicationMode(const CommunicationMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&diff_host_, &from.diff_host_,
    static_cast<size_t>(reinterpret_cast<char*>(&diff_proc_) -
    reinterpret_cast<char*>(&diff_host_)) + sizeof(diff_proc_));
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.CommunicationMode)
}

void CommunicationMode::SharedCtor() {
  diff_host_ = 3;
  same_proc_ = 1;
  diff_proc_ = 2;
}

CommunicationMode::~CommunicationMode() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.CommunicationMode)
  SharedDtor();
}

void CommunicationMode::SharedDtor() {
}

void CommunicationMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunicationMode& CommunicationMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommunicationMode_transport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void CommunicationMode::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.CommunicationMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    diff_host_ = 3;
    same_proc_ = 1;
    diff_proc_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CommunicationMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OptionalMode_IsValid(val))) {
            set_same_proc(static_cast<::apollo::cyber::proto::OptionalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OptionalMode_IsValid(val))) {
            set_diff_proc(static_cast<::apollo::cyber::proto::OptionalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::cyber::proto::OptionalMode_IsValid(val))) {
            set_diff_host(static_cast<::apollo::cyber::proto::OptionalMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CommunicationMode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.CommunicationMode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::cyber::proto::OptionalMode_IsValid(value)) {
            set_same_proc(static_cast< ::apollo::cyber::proto::OptionalMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::cyber::proto::OptionalMode_IsValid(value)) {
            set_diff_proc(static_cast< ::apollo::cyber::proto::OptionalMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::cyber::proto::OptionalMode_IsValid(value)) {
            set_diff_host(static_cast< ::apollo::cyber::proto::OptionalMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.CommunicationMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.CommunicationMode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CommunicationMode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.CommunicationMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->same_proc(), output);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->diff_proc(), output);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->diff_host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.CommunicationMode)
}

::PROTOBUF_NAMESPACE_ID::uint8* CommunicationMode::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.CommunicationMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->same_proc(), target);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->diff_proc(), target);
  }

  // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->diff_host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.CommunicationMode)
  return target;
}

size_t CommunicationMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.CommunicationMode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.cyber.proto.OptionalMode diff_host = 3 [default = RTPS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->diff_host());
    }

    // optional .apollo.cyber.proto.OptionalMode same_proc = 1 [default = INTRA];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->same_proc());
    }

    // optional .apollo.cyber.proto.OptionalMode diff_proc = 2 [default = SHM];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->diff_proc());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunicationMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.CommunicationMode)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunicationMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.CommunicationMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.CommunicationMode)
    MergeFrom(*source);
  }
}

void CommunicationMode::MergeFrom(const CommunicationMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.CommunicationMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      diff_host_ = from.diff_host_;
    }
    if (cached_has_bits & 0x00000002u) {
      same_proc_ = from.same_proc_;
    }
    if (cached_has_bits & 0x00000004u) {
      diff_proc_ = from.diff_proc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommunicationMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.CommunicationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommunicationMode::CopyFrom(const CommunicationMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.CommunicationMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunicationMode::IsInitialized() const {
  return true;
}

void CommunicationMode::Swap(CommunicationMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommunicationMode::InternalSwap(CommunicationMode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(diff_host_, other->diff_host_);
  swap(same_proc_, other->same_proc_);
  swap(diff_proc_, other->diff_proc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunicationMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceLimit::InitAsDefaultInstance() {
}
class ResourceLimit::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ResourceLimit>()._has_bits_);
  static void set_has_max_history_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceLimit::kMaxHistoryDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceLimit::ResourceLimit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ResourceLimit)
}
ResourceLimit::ResourceLimit(const ResourceLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_history_depth_ = from.max_history_depth_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ResourceLimit)
}

void ResourceLimit::SharedCtor() {
  max_history_depth_ = 1000u;
}

ResourceLimit::~ResourceLimit() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ResourceLimit)
  SharedDtor();
}

void ResourceLimit::SharedDtor() {
}

void ResourceLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceLimit& ResourceLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceLimit_transport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ResourceLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ResourceLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_history_depth_ = 1000u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResourceLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 max_history_depth = 1 [default = 1000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          HasBitSetters::set_has_max_history_depth(&has_bits);
          max_history_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResourceLimit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ResourceLimit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_history_depth = 1 [default = 1000];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_max_history_depth(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_history_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ResourceLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ResourceLimit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResourceLimit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ResourceLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_history_depth = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->max_history_depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ResourceLimit)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceLimit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ResourceLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_history_depth = 1 [default = 1000];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_history_depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ResourceLimit)
  return target;
}

size_t ResourceLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ResourceLimit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 max_history_depth = 1 [default = 1000];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->max_history_depth());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ResourceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ResourceLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ResourceLimit)
    MergeFrom(*source);
  }
}

void ResourceLimit::MergeFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ResourceLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_history_depth()) {
    set_max_history_depth(from.max_history_depth());
  }
}

void ResourceLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ResourceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceLimit::CopyFrom(const ResourceLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ResourceLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLimit::IsInitialized() const {
  return true;
}

void ResourceLimit::Swap(ResourceLimit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceLimit::InternalSwap(ResourceLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_history_depth_, other->max_history_depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransportConf::InitAsDefaultInstance() {
  ::apollo::cyber::proto::_TransportConf_default_instance_._instance.get_mutable()->shm_conf_ = const_cast< ::apollo::cyber::proto::ShmConf*>(
      ::apollo::cyber::proto::ShmConf::internal_default_instance());
  ::apollo::cyber::proto::_TransportConf_default_instance_._instance.get_mutable()->participant_attr_ = const_cast< ::apollo::cyber::proto::RtpsParticipantAttr*>(
      ::apollo::cyber::proto::RtpsParticipantAttr::internal_default_instance());
  ::apollo::cyber::proto::_TransportConf_default_instance_._instance.get_mutable()->communication_mode_ = const_cast< ::apollo::cyber::proto::CommunicationMode*>(
      ::apollo::cyber::proto::CommunicationMode::internal_default_instance());
  ::apollo::cyber::proto::_TransportConf_default_instance_._instance.get_mutable()->resource_limit_ = const_cast< ::apollo::cyber::proto::ResourceLimit*>(
      ::apollo::cyber::proto::ResourceLimit::internal_default_instance());
}
class TransportConf::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<TransportConf>()._has_bits_);
  static const ::apollo::cyber::proto::ShmConf& shm_conf(const TransportConf* msg);
  static void set_has_shm_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::cyber::proto::RtpsParticipantAttr& participant_attr(const TransportConf* msg);
  static void set_has_participant_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::cyber::proto::CommunicationMode& communication_mode(const TransportConf* msg);
  static void set_has_communication_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::cyber::proto::ResourceLimit& resource_limit(const TransportConf* msg);
  static void set_has_resource_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::cyber::proto::ShmConf&
TransportConf::HasBitSetters::shm_conf(const TransportConf* msg) {
  return *msg->shm_conf_;
}
const ::apollo::cyber::proto::RtpsParticipantAttr&
TransportConf::HasBitSetters::participant_attr(const TransportConf* msg) {
  return *msg->participant_attr_;
}
const ::apollo::cyber::proto::CommunicationMode&
TransportConf::HasBitSetters::communication_mode(const TransportConf* msg) {
  return *msg->communication_mode_;
}
const ::apollo::cyber::proto::ResourceLimit&
TransportConf::HasBitSetters::resource_limit(const TransportConf* msg) {
  return *msg->resource_limit_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransportConf::kShmConfFieldNumber;
const int TransportConf::kParticipantAttrFieldNumber;
const int TransportConf::kCommunicationModeFieldNumber;
const int TransportConf::kResourceLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransportConf::TransportConf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.TransportConf)
}
TransportConf::TransportConf(const TransportConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shm_conf()) {
    shm_conf_ = new ::apollo::cyber::proto::ShmConf(*from.shm_conf_);
  } else {
    shm_conf_ = nullptr;
  }
  if (from.has_participant_attr()) {
    participant_attr_ = new ::apollo::cyber::proto::RtpsParticipantAttr(*from.participant_attr_);
  } else {
    participant_attr_ = nullptr;
  }
  if (from.has_communication_mode()) {
    communication_mode_ = new ::apollo::cyber::proto::CommunicationMode(*from.communication_mode_);
  } else {
    communication_mode_ = nullptr;
  }
  if (from.has_resource_limit()) {
    resource_limit_ = new ::apollo::cyber::proto::ResourceLimit(*from.resource_limit_);
  } else {
    resource_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.TransportConf)
}

void TransportConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportConf_transport_5fconf_2eproto.base);
  ::memset(&shm_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_limit_) -
      reinterpret_cast<char*>(&shm_conf_)) + sizeof(resource_limit_));
}

TransportConf::~TransportConf() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.TransportConf)
  SharedDtor();
}

void TransportConf::SharedDtor() {
  if (this != internal_default_instance()) delete shm_conf_;
  if (this != internal_default_instance()) delete participant_attr_;
  if (this != internal_default_instance()) delete communication_mode_;
  if (this != internal_default_instance()) delete resource_limit_;
}

void TransportConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportConf& TransportConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportConf_transport_5fconf_2eproto.base);
  return *internal_default_instance();
}


void TransportConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.TransportConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(shm_conf_ != nullptr);
      shm_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(participant_attr_ != nullptr);
      participant_attr_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(communication_mode_ != nullptr);
      communication_mode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(resource_limit_ != nullptr);
      resource_limit_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransportConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_shm_conf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_participant_attr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_communication_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_resource_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransportConf::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.TransportConf)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shm_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_participant_attr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_communication_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_resource_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.TransportConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.TransportConf)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransportConf::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.TransportConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::shm_conf(this), output);
  }

  // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::participant_attr(this), output);
  }

  // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::communication_mode(this), output);
  }

  // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::resource_limit(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.TransportConf)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportConf::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.TransportConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::shm_conf(this), target);
  }

  // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::participant_attr(this), target);
  }

  // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::communication_mode(this), target);
  }

  // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::resource_limit(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.TransportConf)
  return target;
}

size_t TransportConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.TransportConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.cyber.proto.ShmConf shm_conf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shm_conf_);
    }

    // optional .apollo.cyber.proto.RtpsParticipantAttr participant_attr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *participant_attr_);
    }

    // optional .apollo.cyber.proto.CommunicationMode communication_mode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *communication_mode_);
    }

    // optional .apollo.cyber.proto.ResourceLimit resource_limit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resource_limit_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.TransportConf)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.TransportConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.TransportConf)
    MergeFrom(*source);
  }
}

void TransportConf::MergeFrom(const TransportConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.TransportConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shm_conf()->::apollo::cyber::proto::ShmConf::MergeFrom(from.shm_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_participant_attr()->::apollo::cyber::proto::RtpsParticipantAttr::MergeFrom(from.participant_attr());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_communication_mode()->::apollo::cyber::proto::CommunicationMode::MergeFrom(from.communication_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_resource_limit()->::apollo::cyber::proto::ResourceLimit::MergeFrom(from.resource_limit());
    }
  }
}

void TransportConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.TransportConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportConf::CopyFrom(const TransportConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.TransportConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportConf::IsInitialized() const {
  return true;
}

void TransportConf::Swap(TransportConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransportConf::InternalSwap(TransportConf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shm_conf_, other->shm_conf_);
  swap(participant_attr_, other->participant_attr_);
  swap(communication_mode_, other->communication_mode_);
  swap(resource_limit_, other->resource_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportConf::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ShmMulticastLocator* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ShmMulticastLocator >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::ShmMulticastLocator >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ShmConf* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ShmConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::ShmConf >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::RtpsParticipantAttr* Arena::CreateMaybeMessage< ::apollo::cyber::proto::RtpsParticipantAttr >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::RtpsParticipantAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::CommunicationMode* Arena::CreateMaybeMessage< ::apollo::cyber::proto::CommunicationMode >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::CommunicationMode >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ResourceLimit* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ResourceLimit >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::ResourceLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::TransportConf* Arena::CreateMaybeMessage< ::apollo::cyber::proto::TransportConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::TransportConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
