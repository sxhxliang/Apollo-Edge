// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component_conf.proto

#include "component_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_qos_5fprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QosProfile_qos_5fprofile_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_component_5fconf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReaderOption_component_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class ReaderOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReaderOption> _instance;
} _ReaderOption_default_instance_;
class ComponentConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentConfig> _instance;
} _ComponentConfig_default_instance_;
class TimerComponentConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimerComponentConfig> _instance;
} _TimerComponentConfig_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
static void InitDefaultsscc_info_ComponentConfig_component_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ComponentConfig_default_instance_;
    new (ptr) ::apollo::cyber::proto::ComponentConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::ComponentConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ComponentConfig_component_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ComponentConfig_component_5fconf_2eproto}, {
      &scc_info_ReaderOption_component_5fconf_2eproto.base,}};

static void InitDefaultsscc_info_ReaderOption_component_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_ReaderOption_default_instance_;
    new (ptr) ::apollo::cyber::proto::ReaderOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::ReaderOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReaderOption_component_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReaderOption_component_5fconf_2eproto}, {
      &scc_info_QosProfile_qos_5fprofile_2eproto.base,}};

static void InitDefaultsscc_info_TimerComponentConfig_component_5fconf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::cyber::proto::_TimerComponentConfig_default_instance_;
    new (ptr) ::apollo::cyber::proto::TimerComponentConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::cyber::proto::TimerComponentConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimerComponentConfig_component_5fconf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TimerComponentConfig_component_5fconf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_component_5fconf_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_component_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_component_5fconf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_component_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, channel_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, qos_profile_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ReaderOption, pending_queue_size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, config_file_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, flag_file_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::ComponentConfig, readers_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, config_file_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, flag_file_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::cyber::proto::TimerComponentConfig, interval_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::cyber::proto::ReaderOption)},
  { 11, 20, sizeof(::apollo::cyber::proto::ComponentConfig)},
  { 24, 33, sizeof(::apollo::cyber::proto::TimerComponentConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ReaderOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_ComponentConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::cyber::proto::_TimerComponentConfig_default_instance_),
};

const char descriptor_table_protodef_component_5fconf_2eproto[] =
  "\n\024component_conf.proto\022\022apollo.cyber.pro"
  "to\032\021qos_profile.proto\"s\n\014ReaderOption\022\017\n"
  "\007channel\030\001 \001(\t\0223\n\013qos_profile\030\002 \001(\0132\036.ap"
  "ollo.cyber.proto.QosProfile\022\035\n\022pending_q"
  "ueue_size\030\003 \001(\r:\0011\"\204\001\n\017ComponentConfig\022\014"
  "\n\004name\030\001 \001(\t\022\030\n\020config_file_path\030\002 \001(\t\022\026"
  "\n\016flag_file_path\030\003 \001(\t\0221\n\007readers\030\004 \003(\0132"
  " .apollo.cyber.proto.ReaderOption\"h\n\024Tim"
  "erComponentConfig\022\014\n\004name\030\001 \001(\t\022\030\n\020confi"
  "g_file_path\030\002 \001(\t\022\026\n\016flag_file_path\030\003 \001("
  "\t\022\020\n\010interval\030\004 \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_component_5fconf_2eproto_deps[1] = {
  &::descriptor_table_qos_5fprofile_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_component_5fconf_2eproto_sccs[3] = {
  &scc_info_ComponentConfig_component_5fconf_2eproto.base,
  &scc_info_ReaderOption_component_5fconf_2eproto.base,
  &scc_info_TimerComponentConfig_component_5fconf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_component_5fconf_2eproto_once;
static bool descriptor_table_component_5fconf_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_5fconf_2eproto = {
  &descriptor_table_component_5fconf_2eproto_initialized, descriptor_table_protodef_component_5fconf_2eproto, "component_conf.proto", 419,
  &descriptor_table_component_5fconf_2eproto_once, descriptor_table_component_5fconf_2eproto_sccs, descriptor_table_component_5fconf_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_component_5fconf_2eproto::offsets,
  file_level_metadata_component_5fconf_2eproto, 3, file_level_enum_descriptors_component_5fconf_2eproto, file_level_service_descriptors_component_5fconf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_component_5fconf_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_component_5fconf_2eproto), true);
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

void ReaderOption::InitAsDefaultInstance() {
  ::apollo::cyber::proto::_ReaderOption_default_instance_._instance.get_mutable()->qos_profile_ = const_cast< ::apollo::cyber::proto::QosProfile*>(
      ::apollo::cyber::proto::QosProfile::internal_default_instance());
}
class ReaderOption::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ReaderOption>()._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::cyber::proto::QosProfile& qos_profile(const ReaderOption* msg);
  static void set_has_qos_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pending_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::cyber::proto::QosProfile&
ReaderOption::HasBitSetters::qos_profile(const ReaderOption* msg) {
  return *msg->qos_profile_;
}
void ReaderOption::clear_qos_profile() {
  if (qos_profile_ != nullptr) qos_profile_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReaderOption::kChannelFieldNumber;
const int ReaderOption::kQosProfileFieldNumber;
const int ReaderOption::kPendingQueueSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReaderOption::ReaderOption()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ReaderOption)
}
ReaderOption::ReaderOption(const ReaderOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel()) {
    channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  if (from.has_qos_profile()) {
    qos_profile_ = new ::apollo::cyber::proto::QosProfile(*from.qos_profile_);
  } else {
    qos_profile_ = nullptr;
  }
  pending_queue_size_ = from.pending_queue_size_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ReaderOption)
}

void ReaderOption::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReaderOption_component_5fconf_2eproto.base);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  qos_profile_ = nullptr;
  pending_queue_size_ = 1u;
}

ReaderOption::~ReaderOption() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ReaderOption)
  SharedDtor();
}

void ReaderOption::SharedDtor() {
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete qos_profile_;
}

void ReaderOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReaderOption& ReaderOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReaderOption_component_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ReaderOption::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ReaderOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      channel_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(qos_profile_ != nullptr);
      qos_profile_->Clear();
    }
    pending_queue_size_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReaderOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_channel(), ptr, ctx, "apollo.cyber.proto.ReaderOption.channel");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.cyber.proto.QosProfile qos_profile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_qos_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pending_queue_size = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          HasBitSetters::set_has_pending_queue_size(&has_bits);
          pending_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReaderOption::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ReaderOption)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel().data(), static_cast<int>(this->channel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ReaderOption.channel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.cyber.proto.QosProfile qos_profile = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_qos_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pending_queue_size = 3 [default = 1];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_pending_queue_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pending_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ReaderOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ReaderOption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReaderOption::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ReaderOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ReaderOption.channel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel(), output);
  }

  // optional .apollo.cyber.proto.QosProfile qos_profile = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::qos_profile(this), output);
  }

  // optional uint32 pending_queue_size = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->pending_queue_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ReaderOption)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReaderOption::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ReaderOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel().data(), static_cast<int>(this->channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ReaderOption.channel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->channel(), target);
  }

  // optional .apollo.cyber.proto.QosProfile qos_profile = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::qos_profile(this), target);
  }

  // optional uint32 pending_queue_size = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->pending_queue_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ReaderOption)
  return target;
}

size_t ReaderOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ReaderOption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional .apollo.cyber.proto.QosProfile qos_profile = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *qos_profile_);
    }

    // optional uint32 pending_queue_size = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->pending_queue_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReaderOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ReaderOption)
  GOOGLE_DCHECK_NE(&from, this);
  const ReaderOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReaderOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ReaderOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ReaderOption)
    MergeFrom(*source);
  }
}

void ReaderOption::MergeFrom(const ReaderOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ReaderOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_qos_profile()->::apollo::cyber::proto::QosProfile::MergeFrom(from.qos_profile());
    }
    if (cached_has_bits & 0x00000004u) {
      pending_queue_size_ = from.pending_queue_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReaderOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ReaderOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReaderOption::CopyFrom(const ReaderOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ReaderOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReaderOption::IsInitialized() const {
  return true;
}

void ReaderOption::Swap(ReaderOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReaderOption::InternalSwap(ReaderOption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(qos_profile_, other->qos_profile_);
  swap(pending_queue_size_, other->pending_queue_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReaderOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComponentConfig::InitAsDefaultInstance() {
}
class ComponentConfig::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<ComponentConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flag_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComponentConfig::kNameFieldNumber;
const int ComponentConfig::kConfigFilePathFieldNumber;
const int ComponentConfig::kFlagFilePathFieldNumber;
const int ComponentConfig::kReadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComponentConfig::ComponentConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.ComponentConfig)
}
ComponentConfig::ComponentConfig(const ComponentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      readers_(from.readers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  config_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_config_file_path()) {
    config_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_file_path_);
  }
  flag_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_flag_file_path()) {
    flag_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flag_file_path_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.ComponentConfig)
}

void ComponentConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComponentConfig_component_5fconf_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ComponentConfig::~ComponentConfig() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.ComponentConfig)
  SharedDtor();
}

void ComponentConfig::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComponentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentConfig& ComponentConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentConfig_component_5fconf_2eproto.base);
  return *internal_default_instance();
}


void ComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.ComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      config_file_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      flag_file_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ComponentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "apollo.cyber.proto.ComponentConfig.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string config_file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_config_file_path(), ptr, ctx, "apollo.cyber.proto.ComponentConfig.config_file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string flag_file_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_flag_file_path(), ptr, ctx, "apollo.cyber.proto.ComponentConfig.flag_file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.cyber.proto.ReaderOption readers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_readers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ComponentConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.ComponentConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ComponentConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string config_file_path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file_path()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_file_path().data(), static_cast<int>(this->config_file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ComponentConfig.config_file_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string flag_file_path = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_flag_file_path()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flag_file_path().data(), static_cast<int>(this->flag_file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.ComponentConfig.flag_file_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.cyber.proto.ReaderOption readers = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_readers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.ComponentConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.ComponentConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ComponentConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.ComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ComponentConfig.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string config_file_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file_path().data(), static_cast<int>(this->config_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ComponentConfig.config_file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config_file_path(), output);
  }

  // optional string flag_file_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flag_file_path().data(), static_cast<int>(this->flag_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ComponentConfig.flag_file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->flag_file_path(), output);
  }

  // repeated .apollo.cyber.proto.ReaderOption readers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->readers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->readers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.ComponentConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.ComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ComponentConfig.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string config_file_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file_path().data(), static_cast<int>(this->config_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ComponentConfig.config_file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->config_file_path(), target);
  }

  // optional string flag_file_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flag_file_path().data(), static_cast<int>(this->flag_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.ComponentConfig.flag_file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->flag_file_path(), target);
  }

  // repeated .apollo.cyber.proto.ReaderOption readers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->readers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->readers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.ComponentConfig)
  return target;
}

size_t ComponentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.ComponentConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.cyber.proto.ReaderOption readers = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->readers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->readers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string config_file_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->config_file_path());
    }

    // optional string flag_file_path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->flag_file_path());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.ComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.ComponentConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.ComponentConfig)
    MergeFrom(*source);
  }
}

void ComponentConfig::MergeFrom(const ComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.ComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readers_.MergeFrom(from.readers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      config_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_file_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      flag_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flag_file_path_);
    }
  }
}

void ComponentConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.ComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentConfig::CopyFrom(const ComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.ComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentConfig::IsInitialized() const {
  return true;
}

void ComponentConfig::Swap(ComponentConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComponentConfig::InternalSwap(ComponentConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&readers_)->InternalSwap(CastToBase(&other->readers_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_file_path_.Swap(&other->config_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  flag_file_path_.Swap(&other->flag_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimerComponentConfig::InitAsDefaultInstance() {
}
class TimerComponentConfig::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<TimerComponentConfig>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_config_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flag_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimerComponentConfig::kNameFieldNumber;
const int TimerComponentConfig::kConfigFilePathFieldNumber;
const int TimerComponentConfig::kFlagFilePathFieldNumber;
const int TimerComponentConfig::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimerComponentConfig::TimerComponentConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.cyber.proto.TimerComponentConfig)
}
TimerComponentConfig::TimerComponentConfig(const TimerComponentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  config_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_config_file_path()) {
    config_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_file_path_);
  }
  flag_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_flag_file_path()) {
    flag_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flag_file_path_);
  }
  interval_ = from.interval_;
  // @@protoc_insertion_point(copy_constructor:apollo.cyber.proto.TimerComponentConfig)
}

void TimerComponentConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimerComponentConfig_component_5fconf_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interval_ = 0u;
}

TimerComponentConfig::~TimerComponentConfig() {
  // @@protoc_insertion_point(destructor:apollo.cyber.proto.TimerComponentConfig)
  SharedDtor();
}

void TimerComponentConfig::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimerComponentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimerComponentConfig& TimerComponentConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimerComponentConfig_component_5fconf_2eproto.base);
  return *internal_default_instance();
}


void TimerComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.cyber.proto.TimerComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      config_file_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      flag_file_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  interval_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimerComponentConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "apollo.cyber.proto.TimerComponentConfig.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string config_file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_config_file_path(), ptr, ctx, "apollo.cyber.proto.TimerComponentConfig.config_file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string flag_file_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_flag_file_path(), ptr, ctx, "apollo.cyber.proto.TimerComponentConfig.flag_file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          HasBitSetters::set_has_interval(&has_bits);
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimerComponentConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.cyber.proto.TimerComponentConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.TimerComponentConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string config_file_path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file_path()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_file_path().data(), static_cast<int>(this->config_file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.TimerComponentConfig.config_file_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string flag_file_path = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_flag_file_path()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flag_file_path().data(), static_cast<int>(this->flag_file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "apollo.cyber.proto.TimerComponentConfig.flag_file_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 interval = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_interval(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.cyber.proto.TimerComponentConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.cyber.proto.TimerComponentConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimerComponentConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.cyber.proto.TimerComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.TimerComponentConfig.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string config_file_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file_path().data(), static_cast<int>(this->config_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.TimerComponentConfig.config_file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config_file_path(), output);
  }

  // optional string flag_file_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flag_file_path().data(), static_cast<int>(this->flag_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.TimerComponentConfig.flag_file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->flag_file_path(), output);
  }

  // optional uint32 interval = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.cyber.proto.TimerComponentConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* TimerComponentConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.cyber.proto.TimerComponentConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.TimerComponentConfig.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string config_file_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file_path().data(), static_cast<int>(this->config_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.TimerComponentConfig.config_file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->config_file_path(), target);
  }

  // optional string flag_file_path = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flag_file_path().data(), static_cast<int>(this->flag_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.cyber.proto.TimerComponentConfig.flag_file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->flag_file_path(), target);
  }

  // optional uint32 interval = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.cyber.proto.TimerComponentConfig)
  return target;
}

size_t TimerComponentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.cyber.proto.TimerComponentConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string config_file_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->config_file_path());
    }

    // optional string flag_file_path = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->flag_file_path());
    }

    // optional uint32 interval = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerComponentConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.cyber.proto.TimerComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TimerComponentConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimerComponentConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.cyber.proto.TimerComponentConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.cyber.proto.TimerComponentConfig)
    MergeFrom(*source);
  }
}

void TimerComponentConfig::MergeFrom(const TimerComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.cyber.proto.TimerComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      config_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_file_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      flag_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flag_file_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      interval_ = from.interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimerComponentConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.cyber.proto.TimerComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerComponentConfig::CopyFrom(const TimerComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.cyber.proto.TimerComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerComponentConfig::IsInitialized() const {
  return true;
}

void TimerComponentConfig::Swap(TimerComponentConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimerComponentConfig::InternalSwap(TimerComponentConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  config_file_path_.Swap(&other->config_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  flag_file_path_.Swap(&other->flag_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(interval_, other->interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimerComponentConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ReaderOption* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ReaderOption >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::ReaderOption >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::ComponentConfig* Arena::CreateMaybeMessage< ::apollo::cyber::proto::ComponentConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::ComponentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::cyber::proto::TimerComponentConfig* Arena::CreateMaybeMessage< ::apollo::cyber::proto::TimerComponentConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::cyber::proto::TimerComponentConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
