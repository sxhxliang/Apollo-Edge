// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduler_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scheduler_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scheduler_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "classic_conf.pb.h"
#include "choreography_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scheduler_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scheduler_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scheduler_5fconf_2eproto;
namespace apollo {
namespace cyber {
namespace proto {
class InnerThread;
class InnerThreadDefaultTypeInternal;
extern InnerThreadDefaultTypeInternal _InnerThread_default_instance_;
class SchedulerConf;
class SchedulerConfDefaultTypeInternal;
extern SchedulerConfDefaultTypeInternal _SchedulerConf_default_instance_;
}  // namespace proto
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::proto::InnerThread* Arena::CreateMaybeMessage<::apollo::cyber::proto::InnerThread>(Arena*);
template<> ::apollo::cyber::proto::SchedulerConf* Arena::CreateMaybeMessage<::apollo::cyber::proto::SchedulerConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace proto {

// ===================================================================

class InnerThread :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.InnerThread) */ {
 public:
  InnerThread();
  virtual ~InnerThread();

  InnerThread(const InnerThread& from);
  InnerThread(InnerThread&& from) noexcept
    : InnerThread() {
    *this = ::std::move(from);
  }

  inline InnerThread& operator=(const InnerThread& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerThread& operator=(InnerThread&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InnerThread& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InnerThread* internal_default_instance() {
    return reinterpret_cast<const InnerThread*>(
               &_InnerThread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InnerThread* other);
  friend void swap(InnerThread& a, InnerThread& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InnerThread* New() const final {
    return CreateMaybeMessage<InnerThread>(nullptr);
  }

  InnerThread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InnerThread>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InnerThread& from);
  void MergeFrom(const InnerThread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerThread* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.InnerThread";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scheduler_5fconf_2eproto);
    return ::descriptor_table_scheduler_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string cpuset = 2;
  bool has_cpuset() const;
  void clear_cpuset();
  static const int kCpusetFieldNumber = 2;
  const std::string& cpuset() const;
  void set_cpuset(const std::string& value);
  void set_cpuset(std::string&& value);
  void set_cpuset(const char* value);
  void set_cpuset(const char* value, size_t size);
  std::string* mutable_cpuset();
  std::string* release_cpuset();
  void set_allocated_cpuset(std::string* cpuset);

  // optional string policy = 3;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 3;
  const std::string& policy() const;
  void set_policy(const std::string& value);
  void set_policy(std::string&& value);
  void set_policy(const char* value);
  void set_policy(const char* value, size_t size);
  std::string* mutable_policy();
  std::string* release_policy();
  void set_allocated_policy(std::string* policy);

  // optional uint32 prio = 4 [default = 1];
  bool has_prio() const;
  void clear_prio();
  static const int kPrioFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 prio() const;
  void set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.InnerThread)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpuset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prio_;
  friend struct ::TableStruct_scheduler_5fconf_2eproto;
};
// -------------------------------------------------------------------

class SchedulerConf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.proto.SchedulerConf) */ {
 public:
  SchedulerConf();
  virtual ~SchedulerConf();

  SchedulerConf(const SchedulerConf& from);
  SchedulerConf(SchedulerConf&& from) noexcept
    : SchedulerConf() {
    *this = ::std::move(from);
  }

  inline SchedulerConf& operator=(const SchedulerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline SchedulerConf& operator=(SchedulerConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SchedulerConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SchedulerConf* internal_default_instance() {
    return reinterpret_cast<const SchedulerConf*>(
               &_SchedulerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SchedulerConf* other);
  friend void swap(SchedulerConf& a, SchedulerConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SchedulerConf* New() const final {
    return CreateMaybeMessage<SchedulerConf>(nullptr);
  }

  SchedulerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SchedulerConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SchedulerConf& from);
  void MergeFrom(const SchedulerConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SchedulerConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.proto.SchedulerConf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scheduler_5fconf_2eproto);
    return ::descriptor_table_scheduler_5fconf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.cyber.proto.InnerThread threads = 5;
  int threads_size() const;
  void clear_threads();
  static const int kThreadsFieldNumber = 5;
  ::apollo::cyber::proto::InnerThread* mutable_threads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::InnerThread >*
      mutable_threads();
  const ::apollo::cyber::proto::InnerThread& threads(int index) const;
  ::apollo::cyber::proto::InnerThread* add_threads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::InnerThread >&
      threads() const;

  // optional string policy = 1;
  bool has_policy() const;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  const std::string& policy() const;
  void set_policy(const std::string& value);
  void set_policy(std::string&& value);
  void set_policy(const char* value);
  void set_policy(const char* value, size_t size);
  std::string* mutable_policy();
  std::string* release_policy();
  void set_allocated_policy(std::string* policy);

  // optional string process_level_cpuset = 4;
  bool has_process_level_cpuset() const;
  void clear_process_level_cpuset();
  static const int kProcessLevelCpusetFieldNumber = 4;
  const std::string& process_level_cpuset() const;
  void set_process_level_cpuset(const std::string& value);
  void set_process_level_cpuset(std::string&& value);
  void set_process_level_cpuset(const char* value);
  void set_process_level_cpuset(const char* value, size_t size);
  std::string* mutable_process_level_cpuset();
  std::string* release_process_level_cpuset();
  void set_allocated_process_level_cpuset(std::string* process_level_cpuset);

  // optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
  bool has_classic_conf() const;
  void clear_classic_conf();
  static const int kClassicConfFieldNumber = 6;
  const ::apollo::cyber::proto::ClassicConf& classic_conf() const;
  ::apollo::cyber::proto::ClassicConf* release_classic_conf();
  ::apollo::cyber::proto::ClassicConf* mutable_classic_conf();
  void set_allocated_classic_conf(::apollo::cyber::proto::ClassicConf* classic_conf);

  // optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
  bool has_choreography_conf() const;
  void clear_choreography_conf();
  static const int kChoreographyConfFieldNumber = 7;
  const ::apollo::cyber::proto::ChoreographyConf& choreography_conf() const;
  ::apollo::cyber::proto::ChoreographyConf* release_choreography_conf();
  ::apollo::cyber::proto::ChoreographyConf* mutable_choreography_conf();
  void set_allocated_choreography_conf(::apollo::cyber::proto::ChoreographyConf* choreography_conf);

  // optional uint32 routine_num = 2;
  bool has_routine_num() const;
  void clear_routine_num();
  static const int kRoutineNumFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 routine_num() const;
  void set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 default_proc_num = 3;
  bool has_default_proc_num() const;
  void clear_default_proc_num();
  static const int kDefaultProcNumFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_proc_num() const;
  void set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.cyber.proto.SchedulerConf)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::InnerThread > threads_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_level_cpuset_;
  ::apollo::cyber::proto::ClassicConf* classic_conf_;
  ::apollo::cyber::proto::ChoreographyConf* choreography_conf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 routine_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 default_proc_num_;
  friend struct ::TableStruct_scheduler_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerThread

// optional string name = 1;
inline bool InnerThread::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InnerThread::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InnerThread::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.InnerThread.name)
  return name_.GetNoArena();
}
inline void InnerThread::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.InnerThread.name)
}
inline void InnerThread::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.InnerThread.name)
}
inline void InnerThread::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.InnerThread.name)
}
inline void InnerThread::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.InnerThread.name)
}
inline std::string* InnerThread::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.InnerThread.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InnerThread::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.InnerThread.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InnerThread::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.InnerThread.name)
}

// optional string cpuset = 2;
inline bool InnerThread::has_cpuset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InnerThread::clear_cpuset() {
  cpuset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InnerThread::cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.InnerThread.cpuset)
  return cpuset_.GetNoArena();
}
inline void InnerThread::set_cpuset(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cpuset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.InnerThread.cpuset)
}
inline void InnerThread::set_cpuset(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cpuset_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.InnerThread.cpuset)
}
inline void InnerThread::set_cpuset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cpuset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.InnerThread.cpuset)
}
inline void InnerThread::set_cpuset(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cpuset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.InnerThread.cpuset)
}
inline std::string* InnerThread::mutable_cpuset() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.InnerThread.cpuset)
  return cpuset_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InnerThread::release_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.InnerThread.cpuset)
  if (!has_cpuset()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cpuset_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InnerThread::set_allocated_cpuset(std::string* cpuset) {
  if (cpuset != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cpuset_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpuset);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.InnerThread.cpuset)
}

// optional string policy = 3;
inline bool InnerThread::has_policy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InnerThread::clear_policy() {
  policy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& InnerThread::policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.InnerThread.policy)
  return policy_.GetNoArena();
}
inline void InnerThread::set_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  policy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.InnerThread.policy)
}
inline void InnerThread::set_policy(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  policy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.InnerThread.policy)
}
inline void InnerThread::set_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  policy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.InnerThread.policy)
}
inline void InnerThread::set_policy(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  policy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.InnerThread.policy)
}
inline std::string* InnerThread::mutable_policy() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.InnerThread.policy)
  return policy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InnerThread::release_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.InnerThread.policy)
  if (!has_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return policy_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InnerThread::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  policy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.InnerThread.policy)
}

// optional uint32 prio = 4 [default = 1];
inline bool InnerThread::has_prio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InnerThread::clear_prio() {
  prio_ = 1u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InnerThread::prio() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.InnerThread.prio)
  return prio_;
}
inline void InnerThread::set_prio(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  prio_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.InnerThread.prio)
}

// -------------------------------------------------------------------

// SchedulerConf

// optional string policy = 1;
inline bool SchedulerConf::has_policy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SchedulerConf::clear_policy() {
  policy_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SchedulerConf::policy() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.policy)
  return policy_.GetNoArena();
}
inline void SchedulerConf::set_policy(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  policy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.policy)
}
inline void SchedulerConf::set_policy(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  policy_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedulerConf.policy)
}
inline void SchedulerConf::set_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  policy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedulerConf.policy)
}
inline void SchedulerConf::set_policy(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  policy_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedulerConf.policy)
}
inline std::string* SchedulerConf::mutable_policy() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.policy)
  return policy_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SchedulerConf::release_policy() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.policy)
  if (!has_policy()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return policy_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SchedulerConf::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  policy_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.policy)
}

// optional uint32 routine_num = 2;
inline bool SchedulerConf::has_routine_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SchedulerConf::clear_routine_num() {
  routine_num_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulerConf::routine_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.routine_num)
  return routine_num_;
}
inline void SchedulerConf::set_routine_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  routine_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.routine_num)
}

// optional uint32 default_proc_num = 3;
inline bool SchedulerConf::has_default_proc_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SchedulerConf::clear_default_proc_num() {
  default_proc_num_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SchedulerConf::default_proc_num() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.default_proc_num)
  return default_proc_num_;
}
inline void SchedulerConf::set_default_proc_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  default_proc_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.default_proc_num)
}

// optional string process_level_cpuset = 4;
inline bool SchedulerConf::has_process_level_cpuset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SchedulerConf::clear_process_level_cpuset() {
  process_level_cpuset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SchedulerConf::process_level_cpuset() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
  return process_level_cpuset_.GetNoArena();
}
inline void SchedulerConf::set_process_level_cpuset(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  process_level_cpuset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}
inline void SchedulerConf::set_process_level_cpuset(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  process_level_cpuset_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}
inline void SchedulerConf::set_process_level_cpuset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  process_level_cpuset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}
inline void SchedulerConf::set_process_level_cpuset(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  process_level_cpuset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}
inline std::string* SchedulerConf::mutable_process_level_cpuset() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
  return process_level_cpuset_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SchedulerConf::release_process_level_cpuset() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
  if (!has_process_level_cpuset()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return process_level_cpuset_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SchedulerConf::set_allocated_process_level_cpuset(std::string* process_level_cpuset) {
  if (process_level_cpuset != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_level_cpuset_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_level_cpuset);
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.process_level_cpuset)
}

// repeated .apollo.cyber.proto.InnerThread threads = 5;
inline int SchedulerConf::threads_size() const {
  return threads_.size();
}
inline void SchedulerConf::clear_threads() {
  threads_.Clear();
}
inline ::apollo::cyber::proto::InnerThread* SchedulerConf::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.threads)
  return threads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::InnerThread >*
SchedulerConf::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.proto.SchedulerConf.threads)
  return &threads_;
}
inline const ::apollo::cyber::proto::InnerThread& SchedulerConf::threads(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.threads)
  return threads_.Get(index);
}
inline ::apollo::cyber::proto::InnerThread* SchedulerConf::add_threads() {
  // @@protoc_insertion_point(field_add:apollo.cyber.proto.SchedulerConf.threads)
  return threads_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::proto::InnerThread >&
SchedulerConf::threads() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.proto.SchedulerConf.threads)
  return threads_;
}

// optional .apollo.cyber.proto.ClassicConf classic_conf = 6;
inline bool SchedulerConf::has_classic_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::apollo::cyber::proto::ClassicConf& SchedulerConf::classic_conf() const {
  const ::apollo::cyber::proto::ClassicConf* p = classic_conf_;
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.classic_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::cyber::proto::ClassicConf*>(
      &::apollo::cyber::proto::_ClassicConf_default_instance_);
}
inline ::apollo::cyber::proto::ClassicConf* SchedulerConf::release_classic_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.classic_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::cyber::proto::ClassicConf* temp = classic_conf_;
  classic_conf_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::ClassicConf* SchedulerConf::mutable_classic_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (classic_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::ClassicConf>(GetArenaNoVirtual());
    classic_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.classic_conf)
  return classic_conf_;
}
inline void SchedulerConf::set_allocated_classic_conf(::apollo::cyber::proto::ClassicConf* classic_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(classic_conf_);
  }
  if (classic_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      classic_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classic_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  classic_conf_ = classic_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.classic_conf)
}

// optional .apollo.cyber.proto.ChoreographyConf choreography_conf = 7;
inline bool SchedulerConf::has_choreography_conf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::apollo::cyber::proto::ChoreographyConf& SchedulerConf::choreography_conf() const {
  const ::apollo::cyber::proto::ChoreographyConf* p = choreography_conf_;
  // @@protoc_insertion_point(field_get:apollo.cyber.proto.SchedulerConf.choreography_conf)
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::cyber::proto::ChoreographyConf*>(
      &::apollo::cyber::proto::_ChoreographyConf_default_instance_);
}
inline ::apollo::cyber::proto::ChoreographyConf* SchedulerConf::release_choreography_conf() {
  // @@protoc_insertion_point(field_release:apollo.cyber.proto.SchedulerConf.choreography_conf)
  _has_bits_[0] &= ~0x00000008u;
  ::apollo::cyber::proto::ChoreographyConf* temp = choreography_conf_;
  choreography_conf_ = nullptr;
  return temp;
}
inline ::apollo::cyber::proto::ChoreographyConf* SchedulerConf::mutable_choreography_conf() {
  _has_bits_[0] |= 0x00000008u;
  if (choreography_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::cyber::proto::ChoreographyConf>(GetArenaNoVirtual());
    choreography_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.cyber.proto.SchedulerConf.choreography_conf)
  return choreography_conf_;
}
inline void SchedulerConf::set_allocated_choreography_conf(::apollo::cyber::proto::ChoreographyConf* choreography_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(choreography_conf_);
  }
  if (choreography_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      choreography_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, choreography_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  choreography_conf_ = choreography_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.proto.SchedulerConf.choreography_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scheduler_5fconf_2eproto
